{"version":3,"sources":["components/display/Display.module.css","components/view/View.module.css","components/about/About.module.css","components/search/Search.module.css","components/cache/Cache.module.css","components/settings/Settings.module.css","components/interface/ManageSetButton.module.css","components/slideshow/Slideshow.module.css","app/hooks.ts","slices/viewSlice.ts","components/about/About.tsx","slices/settingsSlice.ts","api/e621/config.ts","api/e621/posts.ts","api/e621/sets.ts","slices/setSlice.ts","slices/postsSlice.ts","components/cache/Cache.tsx","components/search/Search.tsx","components/settings/Settings.tsx","components/display/Display.tsx","components/interface/ManageSetButton.tsx","components/interface/Interface.tsx","components/slideshow/Slideshow.tsx","components/view/View.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","components/interface/Interface.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","viewSlice","createSlice","name","initialState","screen","reducers","switchScreen","state","action","payload","actions","selectScreen","view","About","dispatch","className","styles","aboutContainer","aboutBody","href","type","onClick","readSetting","fallback","store","localStorage","getItem","JSON","parse","writeSetting","setting","setItem","stringify","username","api_key","image_display_size","video_display_size","video_display_type","readUsername","readAPIKey","readImageDisplaySize","writeUsername","writeAPIKey","apiKey","settingsSlice","clear","setLogin","setImageDisplaySize","setVideoDisplaySize","setVideoDisplayType","selectUsername","settings","selectImageDisplaySize","_axios","axios","create","baseURL","interceptors","request","use","config","params","_client","auth","password","e621","rateLimit","maxRPS","PostAPI","getPosts","options","get","getPostMediaType","post","file","ext","getPostImageBypassURL","imageDisplaySize","md5","substring","sample","has","getPostMediaURL","url","getPostImageURL","SetsAPI","getManagedSets","getSetById","setId","addPostToSet","postId","formData","FormData","append","toString","removePostFromSet","fetchManagedSets","createAsyncThunk","a","response","data","fetchWorkingSet","_","thunkAPI","selectWorkingSetId","getState","addCurrentPostToSet","removeCurrentPostFromSet","setSlice","managed_sets","working_set_id","working_set","update_set_status","setWorkingSetId","resetUpdateSetStatus","extraReducers","builder","addCase","fulfilled","rejected","pending","selectManagedSets","sets","selectWorkingSet","selectUpdateSetStatus","fetchPosts","tags","selectTags","page","selectPage","posts","postsSlice","fetch_order","fetch_tags","fetch_page","fetch_status","fetch_id","slideshow_index","startSearch","previousSlide","nextSlide","length","meta","requestId","forEach","id","push","selectFetchOrder","selectPosts","selectSlideshowIndex","selectCacheIndices","createSelector","index","order","Array","from","i","filter","selectCurrentSlideshowPost","selectCurrentSlideshowPostId","selectIsCurrentPostInSet","set","post_ids","includes","selectCachePosts","indices","map","tryFetchPosts","Cache","cachePosts","cache","src","alt","Search","useState","setTags","searchContainer","onSubmit","e","startSearchAndFetch","preventDefault","searchForm","value","onChange","target","placeholder","Settings","setLocalUsername","setLocalAPIKey","currentUsername","currentImageDisplaySize","managedSets","workingSetId","close","settingsContainer","undefined","parseInt","label","Owned","setName","Maintained","Display","currentPost","currentFiletype","displayContainer","image","text","ManageSetButton","updateSetState","currentPostId","isPostInSet","workingSet","icon","setIcon","timeout","setTimeoutVar","useEffect","cancelTimeout","clearTimeout","setTimeout","tryAddToSet","useCallback","tryRemoveFromSet","keydownHandler","repeat","key","window","addEventListener","removeEventListener","manageSetButton","Interface","prevSlide","interfaceContainer","mainControls","exitSlideshow","viewSource","rel","extraControls","Slideshow","slideshowContainer","View","visible","disabled","children","hidden","App","configureStore","reducer","postsReducer","viewReducer","preloadedState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1caeae2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Display_displayContainer__1y-B5\",\"image\":\"Display_image__1JJz2\",\"text\":\"Display_text__1LbkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"View_view__2vr6n\",\"hidden\":\"View_hidden__2bpX_\",\"visible\":\"View_visible__v_6PK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutContainer\":\"About_aboutContainer__2-Izw\",\"aboutBody\":\"About_aboutBody__KCsHs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"Search_searchContainer__3moQ_\",\"searchForm\":\"Search_searchForm__1H5ES\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cache\":\"Cache_cache__Nm8x0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"Settings_settingsContainer__mrRal\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"manageSetButton\":\"ManageSetButton_manageSetButton__2Mv6b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slideshowContainer\":\"Slideshow_slideshowContainer__3_r4l\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\ntype ViewScreen = 'search' | 'slideshow' | 'settings' | 'about';\r\n\r\nexport interface ViewState {\r\n  screen: ViewScreen;\r\n}\r\n\r\nconst initialState: ViewState = {\r\n  screen: 'search',\r\n};\r\n\r\nexport const viewSlice = createSlice({\r\n  name: 'view',\r\n  initialState,\r\n  reducers: {\r\n    switchScreen: (state, action: PayloadAction<ViewScreen>) => {\r\n      state.screen = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { switchScreen } = viewSlice.actions;\r\n\r\nexport const selectScreen = (state: RootState) => state.view.screen;\r\n\r\nexport default viewSlice.reducer;\r\n","import { useAppDispatch } from \"../../app/hooks\";\r\nimport { switchScreen } from \"../../slices/viewSlice\";\r\nimport styles from \"./About.module.css\";\r\n\r\nexport default function About() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const close = () => {\r\n    dispatch(switchScreen('search'));\r\n  }\r\n\r\n  return (\r\n    <div className={styles.aboutContainer}>\r\n      <h1>About</h1>\r\n      <div className={styles.aboutBody}>\r\n        <p>\r\n          This is a slideshow web app for <a href=\"https://e621.net/\">e621.net</a> designed with mobile compatability in mind.\r\n        </p>\r\n        <p>\r\n          <a href=\"https://github.com/SanguineDerg/e621-slideshow\">Source Code</a>\r\n        </p>\r\n        <button type=\"button\" onClick={close}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\nfunction readSetting<SettingType>(name: string, fallback: SettingType): SettingType {\r\n  const store = localStorage.getItem(name);\r\n  if (store === null) return fallback;\r\n  try {\r\n    const setting: SettingType = JSON.parse(store);\r\n    return setting;\r\n  } catch {\r\n    return fallback;\r\n  }\r\n}\r\n\r\nfunction writeSetting<SettingType>(name: string, setting: SettingType): boolean {\r\n  try {\r\n    localStorage.setItem(name, JSON.stringify(setting));\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport type ImageDisplaySize = 'full' | 'sample';\r\nexport type VideoDisplaySize = 'full' | '720p' | '480p';\r\nexport type VideoDisplayType = 'webm' | 'mp4';\r\n\r\nexport interface SettingsState {\r\n  username: string;\r\n  api_key: string;\r\n  image_display_size: ImageDisplaySize;\r\n  video_display_size: VideoDisplaySize;\r\n  video_display_type: VideoDisplayType;\r\n}\r\n\r\nconst initialState: SettingsState = {\r\n  username: '',\r\n  api_key: '',\r\n  image_display_size: 'sample',\r\n  video_display_size: '720p',\r\n  video_display_type: 'mp4',\r\n};\r\n\r\nexport const readUsername = () => readSetting('settings.username', initialState.username);\r\nexport const readAPIKey = () => readSetting('settings.api_key', initialState.api_key);\r\nexport const readImageDisplaySize = () => readSetting('settings.image_display_size', initialState.image_display_size);\r\nexport const readVideoDisplaySize = () => readSetting('settings.video_display_size', initialState.video_display_size);\r\nexport const readVideoDisplayType = () => readSetting('settings.video_display_type', initialState.video_display_type);\r\n\r\nexport const writeUsername = (username: string) => writeSetting('settings.username', username);\r\nexport const writeAPIKey = (apiKey: string) => writeSetting('settings.api_key', apiKey);\r\nexport const writeImageDisplaySize = (imageDisplaySize: ImageDisplaySize) => writeSetting('settings.image_display_size', imageDisplaySize);\r\nexport const writeVideoDisplaySize = (videoDisplaySize: VideoDisplaySize) => writeSetting('settings.video_display_size', videoDisplaySize);\r\nexport const writeVideoDisplayType = (videoDisplayType: VideoDisplayType) => writeSetting('settings.video_display_type', videoDisplayType);\r\n\r\nexport const getLocalStorageSettings = () => {\r\n  return {\r\n    username: readUsername(),\r\n    api_key: readAPIKey(),\r\n    image_display_size: readImageDisplaySize(),\r\n    video_display_size: readVideoDisplaySize(),\r\n    video_display_type: readVideoDisplayType(),\r\n  } as SettingsState;\r\n}\r\n\r\nexport const settingsSlice = createSlice({\r\n  name: 'settings',\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state = initialState;\r\n      writeUsername(initialState.username);\r\n      writeAPIKey(initialState.api_key);\r\n    },\r\n    setLogin: (state, action: PayloadAction<{username: string, apiKey: string}>) => {\r\n      state.username = action.payload.username;\r\n      state.api_key = action.payload.apiKey;\r\n      writeUsername(action.payload.username);\r\n      writeAPIKey(action.payload.apiKey);\r\n    },\r\n    setImageDisplaySize: (state, action: PayloadAction<ImageDisplaySize>) => {\r\n      state.image_display_size = action.payload;\r\n      writeImageDisplaySize(action.payload);\r\n    },\r\n    setVideoDisplaySize: (state, action: PayloadAction<VideoDisplaySize>) => {\r\n      state.video_display_size = action.payload;\r\n      writeVideoDisplaySize(action.payload);\r\n    },\r\n    setVideoDisplayType: (state, action: PayloadAction<VideoDisplayType>) => {\r\n      state.video_display_type = action.payload;\r\n      writeVideoDisplayType(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { clear, setLogin, setImageDisplaySize, setVideoDisplaySize, setVideoDisplayType } = settingsSlice.actions;\r\n\r\nexport const selectUsername = (state: RootState) => state.settings.username;\r\nexport const selectAPIKey = (state: RootState) => state.settings.api_key;\r\nexport const selectImageDisplaySize = (state: RootState) => state.settings.image_display_size;\r\nexport const selectVideoDisplaySize = (state: RootState) => state.settings.video_display_size;\r\nexport const selectVideoDisplayType = (state: RootState) => state.settings.video_display_type;\r\n\r\nexport default settingsSlice.reducer;\r\n","import axios from \"axios\";\r\nimport rateLimit from \"axios-rate-limit\";\r\nimport { readAPIKey, readUsername } from \"../../slices/settingsSlice\";\r\n\r\nconst USER_AGENT = \"SanguineDerg's Slideshow/1.0 (by SanguineDerg on e621)\";\r\n\r\nconst _axios = axios.create({\r\n  baseURL: \"https://e621.net/\",\r\n});\r\n\r\n_axios.interceptors.request.use(config => {\r\n  // Add user agent through URL params\r\n  config.params = {\r\n    ...config.params,\r\n    _client: USER_AGENT,\r\n  };\r\n\r\n  // Add HTTP Basic Auth\r\n  const username = readUsername();\r\n  const apiKey = readAPIKey();\r\n  if (username !== '' && apiKey !== '') {\r\n    config.auth = {\r\n      username: username,\r\n      password: apiKey,\r\n    };\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport const e621 = rateLimit(_axios, {maxRPS: 1});\r\n","import { readImageDisplaySize } from '../../slices/settingsSlice';\r\nimport { e621 } from './config';\r\nimport { Post } from './interfaces/posts';\r\n\r\nconst PostAPI = {\r\n  // Fetch list of posts\r\n  getPosts: (options: {\r\n    limit?: number;\r\n    tags?: string;\r\n    page?: number | string;\r\n  } = {}) => {\r\n    return e621.get<{posts: Post[]}>('posts.json', {params: options});\r\n  }\r\n}\r\n\r\nexport const getPostMediaType = (post: Post) => {\r\n  switch (post.file.ext) {\r\n    case 'jpg':\r\n    case 'png':\r\n    case 'gif':\r\n      return 'image';\r\n    case 'webm':\r\n      return 'video';\r\n    case 'swf':\r\n      return 'flash';\r\n  }\r\n}\r\n\r\nconst getPostImageURL = (post: Post) => {\r\n  if (post.file.url === null) return getPostImageBypassURL(post);\r\n  const imageDisplaySize = readImageDisplaySize();\r\n  switch (imageDisplaySize) {\r\n    case 'full':\r\n      return post.file.url;\r\n    case 'sample':\r\n      return post.sample.url;\r\n  }\r\n}\r\n\r\nconst getPostImageBypassURL = (post: Post) => {\r\n  const imageDisplaySize = readImageDisplaySize();\r\n  const md5 = post.file.md5;\r\n  switch (imageDisplaySize) {\r\n    case 'full':\r\n      return `https://static1.e621.net/data/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n    case 'sample':\r\n      if (!post.sample.has) return `https://static1.e621.net/data/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n      return `https://static1.e621.net/data/sample/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n  }\r\n}\r\n\r\nexport const getPostMediaURL = (post: Post) => {\r\n  // TODO add URLs for videos and flash\r\n  switch (getPostMediaType(post)) {\r\n    case 'image':\r\n      return getPostImageURL(post);\r\n    case 'video':\r\n      return '';\r\n    case 'flash':\r\n      return '';\r\n  }\r\n}\r\n\r\nexport default PostAPI\r\n","import { e621 } from './config';\r\nimport { ManagedSets, Set } from './interfaces/sets';\r\n\r\nconst SetsAPI = {\r\n  // Fetch sets owned or maintained by the current user\r\n  getManagedSets: () => {\r\n    return e621.get<ManagedSets>('post_sets/for_select.json');\r\n  },\r\n  // Fetches a set by id\r\n  getSetById: (setId: number) => {\r\n    return e621.get<Set>(`post_sets/${setId}.json`);\r\n  },\r\n  // Adds a post to a set\r\n  addPostToSet: (postId: number, setId: number) => {\r\n    const formData = new FormData();\r\n    formData.append('post_ids[]', postId.toString());\r\n    return e621.post<Set>(`post_sets/${setId}/add_posts.json`, formData);\r\n  },\r\n  // Removes a post from a set\r\n  removePostFromSet: (postId: number, setId: number) => {\r\n    const formData = new FormData();\r\n    formData.append('post_ids[]', postId.toString());\r\n    return e621.post<Set>(`post_sets/${setId}/remove_posts.json`, formData);\r\n  },\r\n}\r\n\r\nexport default SetsAPI\r\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { ManagedSets, Set } from '../api/e621/interfaces/sets';\r\nimport SetsAPI from '../api/e621/sets';\r\nimport { RootState } from '../app/store';\r\n\r\nexport interface SetState {\r\n  managed_sets: ManagedSets | null;\r\n  working_set_id: number | null;\r\n  working_set: Set | null;\r\n  update_set_status: 'idle' | 'working' | 'added' | 'removed' | 'failed';\r\n}\r\n\r\nconst initialState: SetState = {\r\n  managed_sets: null,\r\n  working_set_id: null,\r\n  working_set: null,\r\n  update_set_status: 'idle',\r\n};\r\n\r\nexport const fetchManagedSets = createAsyncThunk(\r\n  'sets/fetchManagedSets',\r\n  async () => {\r\n    const response = await SetsAPI.getManagedSets();\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchWorkingSet = createAsyncThunk<\r\n  Set | null,\r\n  void,\r\n  {state: RootState}\r\n>(\r\n  'sets/fetchWorkingSet',\r\n  async (_, thunkAPI) => {\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (setId === null) return null;\r\n    const response = await SetsAPI.getSetById(setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const addCurrentPostToSet = createAsyncThunk<\r\n  Set | null,\r\n  number,\r\n  {state: RootState}\r\n>(\r\n  'sets/addCurrentPostToSet',\r\n  async (postId, thunkAPI) => {\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (setId === null) return null;\r\n    const response = await SetsAPI.addPostToSet(postId, setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const removeCurrentPostFromSet = createAsyncThunk<\r\n  Set | null,\r\n  number,\r\n  {state: RootState}\r\n>(\r\n  'sets/removeCurrentPostFromSet',\r\n  async (postId, thunkAPI) => {\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (setId === null) return null;\r\n    const response = await SetsAPI.removePostFromSet(postId, setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const setSlice = createSlice({\r\n  name: 'sets',\r\n  initialState,\r\n  reducers: {\r\n    setWorkingSetId: (state, action: PayloadAction<number | null>) => {\r\n      state.working_set_id = action.payload;\r\n      state.working_set = null;\r\n    },\r\n    resetUpdateSetStatus: (state) => {\r\n      state.update_set_status = 'idle';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchManagedSets.fulfilled, (state, action) => {\r\n        state.managed_sets = action.payload;\r\n      })\r\n      .addCase(fetchManagedSets.rejected, (state, action) => {\r\n        // Sets could not be fetched, probably not logged in\r\n        state.managed_sets = null;\r\n        state.working_set_id = null;\r\n        state.working_set = null;\r\n      })\r\n      .addCase(fetchWorkingSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n      })\r\n      .addCase(fetchWorkingSet.rejected, (state, action) => {\r\n        state.working_set = null;\r\n      })\r\n      .addCase(addCurrentPostToSet.pending, (state, action) => {\r\n        state.update_set_status = 'working';\r\n      })\r\n      .addCase(addCurrentPostToSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n        if (action.payload === null) {\r\n          state.update_set_status = 'failed';\r\n        } else {\r\n          state.update_set_status = 'added';\r\n        }\r\n      })\r\n      .addCase(addCurrentPostToSet.rejected, (state, action) => {\r\n        state.update_set_status = 'failed';\r\n      })\r\n      .addCase(removeCurrentPostFromSet.pending, (state, action) => {\r\n        state.update_set_status = 'working';\r\n      })\r\n      .addCase(removeCurrentPostFromSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n        if (action.payload === null) {\r\n          state.update_set_status = 'failed';\r\n        } else {\r\n          state.update_set_status = 'removed';\r\n        }\r\n      })\r\n      .addCase(removeCurrentPostFromSet.rejected, (state, action) => {\r\n        state.update_set_status = 'failed';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setWorkingSetId, resetUpdateSetStatus } = setSlice.actions;\r\n\r\nexport const selectManagedSets = (state: RootState) => state.sets.managed_sets;\r\nexport const selectWorkingSetId = (state: RootState) => state.sets.working_set_id;\r\nexport const selectWorkingSet = (state: RootState) => state.sets.working_set;\r\nexport const selectUpdateSetStatus = (state: RootState) => state.sets.update_set_status;\r\n\r\nexport default setSlice.reducer;\r\n","import { createSlice, PayloadAction, createAsyncThunk, createSelector } from '@reduxjs/toolkit';\r\nimport { Post } from '../api/e621/interfaces/posts';\r\nimport PostAPI from '../api/e621/posts';\r\nimport { RootState, AppThunk } from '../app/store';\r\nimport { resetUpdateSetStatus, selectWorkingSet } from './setSlice';\r\n\r\nexport interface PostsState {\r\n  posts: {[key: number]: Post};\r\n  fetch_order: number[];\r\n  fetch_tags: string;\r\n  fetch_page: number;\r\n  fetch_status: 'idle' | 'loading' | 'failed' | 'finished';\r\n  fetch_id: string;\r\n  slideshow_index: number;\r\n}\r\n\r\nconst initialState: PostsState = {\r\n  posts: {},\r\n  fetch_order: [],\r\n  fetch_tags: '',\r\n  fetch_page: 1,\r\n  fetch_status: 'idle',\r\n  fetch_id: '',\r\n  slideshow_index: 0,\r\n};\r\n\r\nconst fetchPosts = createAsyncThunk<\r\n  Post[],\r\n  void,\r\n  {state: RootState}\r\n>(\r\n  'posts/fetchPosts',\r\n  async (_, thunkAPI) => {\r\n    const response = await PostAPI.getPosts({\r\n      tags: selectTags(thunkAPI.getState()),\r\n      page: selectPage(thunkAPI.getState()),\r\n    });\r\n    return response.data.posts;\r\n  }\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state.fetch_order = [];\r\n      state.fetch_tags = '';\r\n      state.fetch_page = 1;\r\n      state.fetch_status = 'idle';\r\n      state.fetch_id = '';\r\n      state.slideshow_index = 0;\r\n    },\r\n    startSearch: (state, action: PayloadAction<string>) => {\r\n      state.fetch_order = [];\r\n      state.fetch_tags = action.payload;\r\n      state.fetch_page = 1;\r\n      state.fetch_status = 'idle';\r\n      state.fetch_id = '';\r\n      state.slideshow_index = 0;\r\n    },\r\n    previousSlide: (state) => {\r\n      if (state.slideshow_index !== 0) {\r\n        state.slideshow_index -= 1;\r\n      }\r\n    },\r\n    nextSlide: (state) => {\r\n      if (state.slideshow_index < state.fetch_order.length - 1) {\r\n        state.slideshow_index += 1;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.fetch_status = 'loading';\r\n        state.fetch_id = action.meta.requestId;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        // Check if the fetch was cancelled\r\n        if (action.meta.requestId !== state.fetch_id) return;\r\n        const posts = action.payload;\r\n        if (posts.length === 0) {\r\n          state.fetch_status = 'finished';\r\n          state.fetch_page = 0;\r\n          state.fetch_id = '';\r\n        } else {\r\n          state.fetch_status = 'idle';\r\n          state.fetch_page = state.fetch_page && state.fetch_page + 1;\r\n          state.fetch_id = '';\r\n          posts.forEach(post => {\r\n            state.posts[post.id] = post;\r\n            state.fetch_order.push(post.id);\r\n          });\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clear, startSearch, previousSlide, nextSlide } = postsSlice.actions;\r\n\r\nexport const selectTags = (state: RootState) => state.posts.fetch_tags;\r\nexport const selectPage = (state: RootState) => state.posts.fetch_page;\r\nexport const selectFetchStatus = (state: RootState) => state.posts.fetch_status;\r\nexport const selectFetchOrder = (state: RootState) => state.posts.fetch_order;\r\nexport const selectPosts = (state: RootState) => state.posts.posts;\r\n\r\nexport const selectSlideshowIndex = (state: RootState) => state.posts.slideshow_index;\r\n\r\nexport const selectCacheIndices = createSelector([selectSlideshowIndex, selectFetchOrder], (index, order) => {\r\n  // TODO add settings for cache size\r\n  const indices = Array.from({length: 6}, (_, i) => i + index - 2);\r\n  return indices.filter((i) => i >= 0 && i < order.length);\r\n});\r\n\r\nexport const selectCurrentSlideshowPost = createSelector([selectPosts, selectFetchOrder, selectSlideshowIndex], (posts, order, index) => {\r\n  if (order.length === 0) return null;\r\n  return posts[order[index]];\r\n});\r\n\r\nexport const selectCurrentSlideshowPostId = createSelector([selectCurrentSlideshowPost], (post) => {\r\n  return post !== null ? post.id : null;\r\n});\r\n\r\nexport const selectIsCurrentPostInSet = createSelector([selectCurrentSlideshowPostId, selectWorkingSet], (postId, set) => {\r\n  return (postId !== null && set !== null) ? set.post_ids.includes(postId) : false;\r\n});\r\n\r\nexport const selectCachePosts = createSelector([selectPosts, selectFetchOrder, selectCacheIndices], (posts, order, indices) => {\r\n  if (order.length === 0) return [];\r\n  return indices.map(index => posts[order[index]]);\r\n});\r\n\r\nexport const tryFetchPosts = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const status = selectFetchStatus(getState());\r\n  if (status === 'idle') {\r\n    dispatch(fetchPosts());\r\n  }\r\n};\r\n\r\nexport const startSearchAndFetch = (tags: string): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(startSearch(tags));\r\n  dispatch(fetchPosts());\r\n  dispatch(resetUpdateSetStatus());\r\n};\r\n\r\nexport const nextSlideAndPrefetch = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(nextSlide());\r\n  dispatch(resetUpdateSetStatus());\r\n  const index = selectSlideshowIndex(getState());\r\n  const order = selectFetchOrder(getState());\r\n  if (index >= order.length - 5) {\r\n    dispatch(tryFetchPosts());\r\n  }\r\n};\r\n\r\nexport const previousSlideAndPrefetch = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(previousSlide());\r\n  dispatch(resetUpdateSetStatus());\r\n  const index = selectSlideshowIndex(getState());\r\n  const order = selectFetchOrder(getState());\r\n  if (index >= order.length - 5) {\r\n    dispatch(tryFetchPosts());\r\n  }\r\n};\r\n\r\nexport default postsSlice.reducer;\r\n","import { getPostMediaType, getPostMediaURL } from '../../api/e621/posts';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { selectCachePosts } from '../../slices/postsSlice';\r\nimport styles from './Cache.module.css';\r\n\r\nexport default function Cache() {\r\n  const cachePosts = useAppSelector(selectCachePosts);\r\n\r\n  return (\r\n    <div className={styles.cache}>\r\n      {cachePosts.map(post => {\r\n        return (getPostMediaType(post) === 'image') && (<img key={post.id} src={getPostMediaURL(post)} alt=\"\" />);\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { FormEvent, useState } from \"react\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { startSearchAndFetch } from \"../../slices/postsSlice\";\r\nimport { switchScreen } from \"../../slices/viewSlice\";\r\nimport styles from \"./Search.module.css\";\r\n\r\nexport default function Search() {\r\n  const [tags, setTags] = useState('');\r\n  const dispatch = useAppDispatch();\r\n\r\n  const submit = (e: FormEvent) => {\r\n    dispatch(startSearchAndFetch(tags));\r\n    dispatch(switchScreen('slideshow'));\r\n    e.preventDefault();\r\n  }\r\n\r\n  const openSettings = () => {\r\n    dispatch(switchScreen('settings'));\r\n  }\r\n\r\n  const openAbout = () => {\r\n    dispatch(switchScreen('about'));\r\n  }\r\n\r\n  const close = () => {\r\n    dispatch(switchScreen('slideshow'));\r\n  }\r\n\r\n  return (\r\n    <div className={styles.searchContainer}>\r\n      <h1>Search</h1>\r\n      <form onSubmit={submit} className={styles.searchForm}>\r\n        <input value={tags} onChange={e => setTags(e.target.value)} type=\"text\" placeholder=\"rating:s ...\" />\r\n        <button type=\"submit\">Search</button>\r\n        <button type=\"button\" onClick={close}>Close</button>\r\n        <button type=\"button\" onClick={openSettings}>Settings</button>\r\n        <button type=\"button\" onClick={openAbout}>About</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { ImageDisplaySize, selectImageDisplaySize, selectUsername, setImageDisplaySize, setLogin } from \"../../slices/settingsSlice\";\r\nimport { fetchManagedSets, fetchWorkingSet, selectManagedSets, selectWorkingSetId, setWorkingSetId } from \"../../slices/setSlice\";\r\nimport { switchScreen } from \"../../slices/viewSlice\";\r\nimport styles from \"./Settings.module.css\";\r\n\r\nexport default function Settings() {\r\n  const [username, setLocalUsername] = useState('');\r\n  const [apiKey, setLocalAPIKey] = useState('');\r\n\r\n  const currentUsername = useAppSelector(selectUsername);\r\n  const currentImageDisplaySize = useAppSelector(selectImageDisplaySize);\r\n  const managedSets = useAppSelector(selectManagedSets);\r\n  const workingSetId = useAppSelector(selectWorkingSetId);\r\n  \r\n  const dispatch = useAppDispatch();\r\n\r\n  const saveLogin = () => {\r\n    dispatch(setLogin({username: username, apiKey: apiKey}));\r\n    setLocalUsername('');\r\n    setLocalAPIKey('');\r\n  }\r\n\r\n  const close = () => {\r\n    dispatch(fetchWorkingSet());\r\n    dispatch(switchScreen('search'));\r\n  }\r\n\r\n  return (\r\n    <div className={styles.settingsContainer}>\r\n      <h1>Settings</h1>\r\n\r\n      <button onClick={close}>Close</button>\r\n\r\n      <fieldset>\r\n        <legend>Login</legend>\r\n        <span>{currentUsername !== '' ? `Logged in as ${currentUsername}` : 'Not logged in'}</span>\r\n        <input value={username} onChange={e => setLocalUsername(e.target.value)} type=\"text\" />\r\n        <input value={apiKey} onChange={e => setLocalAPIKey(e.target.value)} type=\"password\" />\r\n        <button type=\"button\" onClick={saveLogin}>Save Login</button>\r\n      </fieldset>\r\n      \r\n      <fieldset>\r\n        <legend>Display</legend>\r\n        <label>\r\n          Image size\r\n        </label>\r\n        <select value={currentImageDisplaySize} onChange={e => dispatch(setImageDisplaySize(e.target.value as ImageDisplaySize))}>\r\n          <option value=\"full\">Full Image</option>\r\n          <option value=\"sample\">Sample Image</option>\r\n        </select>\r\n      </fieldset>\r\n\r\n      <fieldset>\r\n        <legend>Set Management</legend>\r\n        <button onClick={() => dispatch(fetchManagedSets())}>Get sets</button>\r\n        {managedSets !== null && (\r\n          <>\r\n            <select value={workingSetId !== null ? workingSetId : undefined} onChange={e => dispatch(setWorkingSetId(e.target.value !== \"\" ? parseInt(e.target.value) : null))}>\r\n              <option>Select a set</option>\r\n              <optgroup label=\"Owned\">\r\n                {managedSets.Owned.map(([setName, setId], index) => (\r\n                  <option value={setId} key={index}>{setName}</option>\r\n                ))}\r\n              </optgroup>\r\n              <optgroup label=\"Maintained\">\r\n                {managedSets.Maintained.map(([setName, setId], index) => (\r\n                  <option value={setId} key={index}>{setName}</option>\r\n                ))}\r\n              </optgroup>\r\n            </select>\r\n          </>\r\n        )}\r\n      </fieldset>\r\n\r\n      <button onClick={close}>Close</button>\r\n    </div>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport { getPostMediaType, getPostMediaURL } from '../../api/e621/posts';\r\nimport { selectCurrentSlideshowPost } from '../../slices/postsSlice';\r\nimport styles from './Display.module.css'\r\n\r\nexport function Display() {\r\n  const currentPost = useSelector(selectCurrentSlideshowPost);\r\n\r\n  const currentFiletype = currentPost !== null ? getPostMediaType(currentPost) : null;\r\n\r\n  return (\r\n    <div className={styles.displayContainer}>\r\n      {currentFiletype === 'image' && (\r\n        <img className={styles.image} src={currentPost !== null ? (getPostMediaURL(currentPost)) : undefined} alt=\"\" />\r\n      )}\r\n      {currentFiletype === 'video' && (\r\n        <div className={styles.text}><span>Video</span></div>\r\n      )}\r\n      {currentFiletype === 'flash' && (\r\n        <div className={styles.text}><span>Flash</span></div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { selectCurrentSlideshowPostId, selectIsCurrentPostInSet } from \"../../slices/postsSlice\";\r\nimport { addCurrentPostToSet, removeCurrentPostFromSet, selectUpdateSetStatus, selectWorkingSet } from \"../../slices/setSlice\";\r\nimport styles from './ManageSetButton.module.css';\r\n\r\nexport default function ManageSetButton() {\r\n  const updateSetState = useAppSelector(selectUpdateSetStatus);\r\n  const currentPostId = useAppSelector(selectCurrentSlideshowPostId);\r\n  const isPostInSet = useAppSelector(selectIsCurrentPostInSet);\r\n  const workingSet = useAppSelector(selectWorkingSet);\r\n\r\n  const [icon, setIcon] = useState('🗑️');\r\n  const [timeout, setTimeoutVar] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const cancelTimeout = () => {\r\n      if (timeout !== null) {\r\n        clearTimeout(timeout);\r\n        setTimeoutVar(null);\r\n      }\r\n    };\r\n    switch (updateSetState) {\r\n      case 'idle':\r\n      case 'added':\r\n      case 'removed':\r\n        cancelTimeout();\r\n        setIcon(isPostInSet ? '➖' : '➕');\r\n        break;\r\n      case 'working':\r\n        cancelTimeout();\r\n        setIcon('🔄');\r\n        break;\r\n      case 'failed':\r\n        cancelTimeout();\r\n        setIcon('❌');\r\n        setTimeoutVar(setTimeout(() => {\r\n          setIcon(isPostInSet ? '➖' : '➕');\r\n        }, 2000));\r\n        break;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [updateSetState, isPostInSet]);\r\n\r\n  const tryAddToSet = useCallback(() => {\r\n    if (currentPostId === null || updateSetState === 'working' || isPostInSet) return;\r\n    dispatch(addCurrentPostToSet(currentPostId));\r\n  }, [dispatch, currentPostId, updateSetState, isPostInSet]);\r\n\r\n  const tryRemoveFromSet = useCallback(() => {\r\n    if (currentPostId === null || updateSetState === 'working' || !isPostInSet) return;\r\n    dispatch(removeCurrentPostFromSet(currentPostId));\r\n  }, [dispatch, currentPostId, updateSetState, isPostInSet]);\r\n\r\n  const keydownHandler = useCallback((e: KeyboardEvent) => {\r\n    if (e.repeat) return;\r\n    switch (e.key) {\r\n      case \"ArrowUp\":\r\n        tryAddToSet();\r\n        return;\r\n      case \"ArrowDown\":\r\n        tryRemoveFromSet();\r\n        return;\r\n      default: return;\r\n    }\r\n  }, [tryAddToSet, tryRemoveFromSet]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", keydownHandler, true);\r\n    return () => window.removeEventListener(\"keydown\", keydownHandler, true);\r\n  }, [keydownHandler]);\r\n  \r\n  if (currentPostId === null || workingSet === null) return null;\r\n\r\n  const handleClick = () => {\r\n    if (updateSetState === 'working') return;\r\n    if (isPostInSet) {\r\n      dispatch(removeCurrentPostFromSet(currentPostId));\r\n    } else {\r\n      dispatch(addCurrentPostToSet(currentPostId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button className={styles.manageSetButton} onClick={handleClick}>{icon}</button>\r\n  );\r\n}","import { useCallback, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { nextSlideAndPrefetch, previousSlideAndPrefetch, selectCurrentSlideshowPost } from '../../slices/postsSlice';\r\nimport { switchScreen } from '../../slices/viewSlice';\r\nimport styles from './Interface.module.css';\r\nimport ManageSetButton from './ManageSetButton';\r\n\r\nexport function Interface() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentPost = useAppSelector(selectCurrentSlideshowPost);\r\n  \r\n  const nextSlide = useCallback(() => {\r\n    dispatch(nextSlideAndPrefetch());\r\n  }, [dispatch]);\r\n  \r\n  const prevSlide = useCallback(() => {\r\n    dispatch(previousSlideAndPrefetch());\r\n  }, [dispatch]);\r\n\r\n  const keydownHandler = useCallback((e: KeyboardEvent) => {\r\n    if (e.repeat) return;\r\n    switch (e.key) {\r\n      case \"ArrowLeft\":\r\n        prevSlide();\r\n        return;\r\n      case \"ArrowRight\":\r\n        nextSlide();\r\n        return;\r\n      default: return;\r\n    }\r\n  }, [nextSlide, prevSlide]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", keydownHandler, true);\r\n    return () => window.removeEventListener(\"keydown\", keydownHandler, true);\r\n  }, [keydownHandler]);\r\n\r\n  return (\r\n    <div className={styles.interfaceContainer}>\r\n      <div className={styles.mainControls}>\r\n        <div className={styles.nextSlide} onClick={nextSlide}>Next</div>\r\n        <div className={styles.previousSlide} onClick={prevSlide}>Previous</div>\r\n        <div className={styles.exitSlideshow} onClick={() => dispatch(switchScreen('search'))}>Close</div>\r\n        <a className={styles.viewSource} target=\"_blank\" rel=\"noopener noreferrer\" {...(currentPost === null ? {onClick: () => {}} : {href: `https://e621.net/posts/${currentPost.id}`})}>Link</a>\r\n      </div>\r\n      <div className={styles.extraControls}>\r\n        <ManageSetButton />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { Display } from '../display/Display';\r\nimport { Interface } from '../interface/Interface';\r\nimport styles from './Slideshow.module.css';\r\n\r\nexport function Slideshow() {\r\n  return (\r\n    <div className={styles.slideshowContainer}>\r\n      <Display />\r\n      <Interface />\r\n    </div>\r\n  );\r\n}","import { PropsWithChildren } from 'react';\r\nimport styles from './View.module.css';\r\n\r\ninterface ViewProps {\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport default function View({visible = true, disabled = false, children}: PropsWithChildren<ViewProps>) {\r\n  return (\r\n    <div className={styles.view + ' ' + (visible ? styles.visible : styles.hidden)}>\r\n      {!disabled && children}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { useAppSelector } from './app/hooks';\r\nimport About from './components/about/About';\r\nimport Cache from './components/cache/Cache';\r\nimport Search from './components/search/Search';\r\nimport Settings from './components/settings/Settings';\r\nimport { Slideshow } from './components/slideshow/Slideshow';\r\nimport View from './components/view/View';\r\nimport { selectScreen } from './slices/viewSlice';\r\n\r\nfunction App() {\r\n  const screen = useAppSelector(selectScreen);\r\n  return (\r\n    <div className=\"App\">\r\n      <Cache />\r\n      <View disabled={screen !== 'slideshow'} ><Slideshow /></View>\r\n      <View visible={screen === 'search'} ><Search /></View>\r\n      <View visible={screen === 'settings'} ><Settings /></View>\r\n      <View visible={screen === 'about'} ><About /></View>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport postsReducer from '../slices/postsSlice';\nimport settingsSlice, { getLocalStorageSettings } from '../slices/settingsSlice';\nimport setSlice from '../slices/setSlice';\nimport viewReducer from '../slices/viewSlice';\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    view: viewReducer,\n    settings: settingsSlice,\n    sets: setSlice,\n  },\n  preloadedState: {settings: getLocalStorageSettings()},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { fetchManagedSets } from './slices/setSlice';\n\nstore.dispatch(fetchManagedSets());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"interfaceContainer\":\"Interface_interfaceContainer__32rjR\",\"mainControls\":\"Interface_mainControls__1f-3y\",\"extraControls\":\"Interface_extraControls__3sxVc\",\"fadeout\":\"Interface_fadeout__3FYND\",\"nextSlide\":\"Interface_nextSlide__1oMMA\",\"previousSlide\":\"Interface_previousSlide__1G1Z_\",\"exitSlideshow\":\"Interface_exitSlideshow__1-rsM\",\"viewSource\":\"Interface_viewSource__1ikEu\"};"],"sourceRoot":""}