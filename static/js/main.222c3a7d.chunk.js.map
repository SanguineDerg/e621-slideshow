{"version":3,"sources":["components/display/Display.module.css","components/interface/ManageSetButton.module.css","components/view/View.module.css","components/about/About.module.css","components/search/Search.module.css","components/cache/Cache.module.css","components/settings/Settings.module.css","components/slideshow/Slideshow.module.css","app/hooks.ts","slices/viewSlice.ts","components/about/About.tsx","app/localStorage.ts","slices/settingsSlice.ts","api/e621/config.ts","api/e621/posts.ts","api/e621/sets.ts","slices/setSlice.ts","slices/postsSlice.ts","components/cache/Cache.tsx","components/search/Search.tsx","components/settings/Settings.tsx","components/display/Display.tsx","components/interface/ManageSetButton.tsx","components/interface/Interface.tsx","components/slideshow/Slideshow.tsx","components/view/View.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","components/interface/Interface.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","viewSlice","createSlice","name","initialState","screen","reducers","switchScreen","state","action","payload","actions","selectScreen","view","About","dispatch","close","useCallback","className","styles","aboutContainer","aboutBody","href","type","onClick","readLocalStorage","key","fallback","store","localStorage","getItem","JSON","parse","writeLocalStorage","value","setItem","stringify","username","api_key","image_display_size","video_display_size","video_display_type","set_management_button_type","readUsername","readAPIKey","readImageDisplaySize","writeUsername","writeAPIKey","apiKey","writeImageDisplaySize","imageDisplaySize","writeVideoDisplaySize","videoDisplaySize","writeVideoDisplayType","videoDisplayType","writeSetManagementButtonType","setManagementButtonType","settingsSlice","clear","setLogin","setImageDisplaySize","setVideoDisplaySize","setVideoDisplayType","setSetManagementButtonType","selectUsername","settings","selectImageDisplaySize","selectSetManagementButtonType","_axios","axios","create","baseURL","interceptors","request","use","config","params","_client","auth","password","e621","rateLimit","maxRPS","PostAPI","getPosts","options","get","getPostMediaType","post","file","ext","getPostImageBypassURL","md5","substring","sample","has","getPostMediaURL","url","getPostImageURL","SetsAPI","getManagedSets","getSetById","setId","addPostToSet","postId","formData","FormData","append","toString","removePostFromSet","managed_sets","working_set_id","working_set","update_set_status","writeWorkingSetId","workingSetId","fetchManagedSets","createAsyncThunk","a","response","data","fetchWorkingSet","_","thunkAPI","selectWorkingSetId","getState","addCurrentPostToSet","removeCurrentPostFromSet","setSlice","setWorkingSetId","resetUpdateSetStatus","extraReducers","builder","addCase","fulfilled","rejected","pending","selectManagedSets","sets","selectWorkingSet","selectUpdateSetStatus","fetchPosts","tags","selectTags","page","selectPage","then","posts","catch","error","rejectWithValue","postsSlice","fetch_order","fetch_tags","fetch_page","fetch_status","fetch_id","fetch_error","slideshow_index","startSearch","previousSlide","nextSlide","length","meta","requestId","forEach","id","push","selectFetchStatus","selectFetchOrder","selectPosts","selectFetchError","selectSlideshowIndex","selectCacheIndices","createSelector","index","order","Array","from","i","filter","selectCurrentSlideshowPost","selectCurrentSlideshowPostId","selectIsCurrentPostInSet","set","post_ids","includes","selectCachePosts","indices","map","tryFetchPosts","Cache","cachePosts","cache","src","alt","Search","useState","setTags","submit","e","startSearchAndFetch","preventDefault","openSettings","openAbout","searchContainer","onSubmit","searchForm","onChange","target","placeholder","Settings","setLocalUsername","setLocalAPIKey","currentUsername","currentImageDisplaySize","managedSets","currentSetManagementButtonType","saveLogin","settingsContainer","undefined","parseInt","label","Owned","setName","Maintained","Display","currentPost","status","currentFiletype","displayContainer","image","text","ManageSetButton","updateSetState","currentPostId","isPostInSet","workingSet","buttonType","icon","setIcon","manageSetButton","setClassName","backgroundColor","setBackgroundColor","useEffect","mobile","tryAddToSet","tryRemoveFromSet","keydownHandler","repeat","window","addEventListener","removeEventListener","handleClick","style","backgroundImage","process","Interface","prevSlide","interfaceContainer","mainControls","exitSlideshow","viewSource","rel","extraControls","Slideshow","slideshowContainer","View","visible","disabled","children","hidden","App","configureStore","reducer","postsReducer","viewReducer","preloadedState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.222c3a7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Display_displayContainer__1y-B5\",\"image\":\"Display_image__1JJz2\",\"text\":\"Display_text__1LbkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"manageSetButton\":\"ManageSetButton_manageSetButton__2Mv6b\",\"mobile\":\"ManageSetButton_mobile__1ESA6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"View_view__2vr6n\",\"hidden\":\"View_hidden__2bpX_\",\"visible\":\"View_visible__v_6PK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutContainer\":\"About_aboutContainer__2-Izw\",\"aboutBody\":\"About_aboutBody__KCsHs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"Search_searchContainer__3moQ_\",\"searchForm\":\"Search_searchForm__1H5ES\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cache\":\"Cache_cache__Nm8x0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"Settings_settingsContainer__mrRal\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slideshowContainer\":\"Slideshow_slideshowContainer__3_r4l\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\ntype ViewScreen = 'search' | 'slideshow' | 'settings' | 'about';\r\n\r\nexport interface ViewState {\r\n  screen: ViewScreen;\r\n}\r\n\r\nconst initialState: ViewState = {\r\n  screen: 'search',\r\n};\r\n\r\nexport const viewSlice = createSlice({\r\n  name: 'view',\r\n  initialState,\r\n  reducers: {\r\n    switchScreen: (state, action: PayloadAction<ViewScreen>) => {\r\n      state.screen = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { switchScreen } = viewSlice.actions;\r\n\r\nexport const selectScreen = (state: RootState) => state.view.screen;\r\n\r\nexport default viewSlice.reducer;\r\n","import { useCallback } from 'react';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { switchScreen } from '../../slices/viewSlice';\r\nimport styles from './About.module.css';\r\n\r\nexport default function About() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const close = useCallback(() => {\r\n    dispatch(switchScreen('search'));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.aboutContainer}>\r\n      <h1>About</h1>\r\n      <div className={styles.aboutBody}>\r\n        <p>\r\n          This is a slideshow web app for <a href=\"https://e621.net/\">e621.net</a> designed with mobile compatability in mind.\r\n        </p>\r\n        <p>\r\n          <a href=\"https://github.com/SanguineDerg/e621-slideshow\">Source Code</a>\r\n        </p>\r\n        <button type=\"button\" onClick={close}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","export function readLocalStorage<Type>(key: string, fallback: Type): Type {\r\n  const store = localStorage.getItem(key);\r\n  if (store === null) return fallback;\r\n  try {\r\n    const value: Type = JSON.parse(store);\r\n    return value;\r\n  } catch {\r\n    return fallback;\r\n  }\r\n}\r\n\r\nexport function writeLocalStorage<Type>(key: string, value: Type): boolean {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { readLocalStorage, writeLocalStorage } from '../app/localStorage';\r\nimport { RootState } from '../app/store';\r\n\r\nexport type ImageDisplaySize = 'full' | 'sample';\r\nexport type VideoDisplaySize = 'full' | '720p' | '480p';\r\nexport type VideoDisplayType = 'webm' | 'mp4';\r\n\r\nexport type SetManagementButtonType = 'desktop' | 'mobile';\r\n\r\nexport interface SettingsState {\r\n  username: string;\r\n  api_key: string;\r\n  image_display_size: ImageDisplaySize;\r\n  video_display_size: VideoDisplaySize;\r\n  video_display_type: VideoDisplayType;\r\n  set_management_button_type: SetManagementButtonType;\r\n}\r\n\r\nconst initialState: SettingsState = {\r\n  username: '',\r\n  api_key: '',\r\n  image_display_size: 'sample',\r\n  video_display_size: '720p',\r\n  video_display_type: 'mp4',\r\n  set_management_button_type: 'mobile',\r\n};\r\n\r\nexport const readUsername = () => readLocalStorage('settings.username', initialState.username);\r\nexport const readAPIKey = () => readLocalStorage('settings.api_key', initialState.api_key);\r\nexport const readImageDisplaySize = () => readLocalStorage('settings.image_display_size', initialState.image_display_size);\r\nexport const readVideoDisplaySize = () => readLocalStorage('settings.video_display_size', initialState.video_display_size);\r\nexport const readVideoDisplayType = () => readLocalStorage('settings.video_display_type', initialState.video_display_type);\r\nexport const readSetManagementButtonType = () => readLocalStorage('settings.set_management_button_type', initialState.set_management_button_type);\r\n\r\nexport const writeUsername = (username: string) => writeLocalStorage('settings.username', username);\r\nexport const writeAPIKey = (apiKey: string) => writeLocalStorage('settings.api_key', apiKey);\r\nexport const writeImageDisplaySize = (imageDisplaySize: ImageDisplaySize) => writeLocalStorage('settings.image_display_size', imageDisplaySize);\r\nexport const writeVideoDisplaySize = (videoDisplaySize: VideoDisplaySize) => writeLocalStorage('settings.video_display_size', videoDisplaySize);\r\nexport const writeVideoDisplayType = (videoDisplayType: VideoDisplayType) => writeLocalStorage('settings.video_display_type', videoDisplayType);\r\nexport const writeSetManagementButtonType = (setManagementButtonType: SetManagementButtonType) => writeLocalStorage('settings.set_management_button_type', setManagementButtonType);\r\n\r\nexport const getLocalStorageSettings = () => {\r\n  return {\r\n    username: readUsername(),\r\n    api_key: readAPIKey(),\r\n    image_display_size: readImageDisplaySize(),\r\n    video_display_size: readVideoDisplaySize(),\r\n    video_display_type: readVideoDisplayType(),\r\n    set_management_button_type: readSetManagementButtonType(),\r\n  } as SettingsState;\r\n}\r\n\r\nexport const settingsSlice = createSlice({\r\n  name: 'settings',\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state = initialState;\r\n      writeUsername(initialState.username);\r\n      writeAPIKey(initialState.api_key);\r\n      writeImageDisplaySize(initialState.image_display_size);\r\n      writeVideoDisplaySize(initialState.video_display_size);\r\n      writeVideoDisplayType(initialState.video_display_type);\r\n      writeSetManagementButtonType(initialState.set_management_button_type);\r\n    },\r\n    setLogin: (state, action: PayloadAction<{username: string, apiKey: string}>) => {\r\n      state.username = action.payload.username;\r\n      state.api_key = action.payload.apiKey;\r\n      writeUsername(action.payload.username);\r\n      writeAPIKey(action.payload.apiKey);\r\n    },\r\n    setImageDisplaySize: (state, action: PayloadAction<ImageDisplaySize>) => {\r\n      state.image_display_size = action.payload;\r\n      writeImageDisplaySize(action.payload);\r\n    },\r\n    setVideoDisplaySize: (state, action: PayloadAction<VideoDisplaySize>) => {\r\n      state.video_display_size = action.payload;\r\n      writeVideoDisplaySize(action.payload);\r\n    },\r\n    setVideoDisplayType: (state, action: PayloadAction<VideoDisplayType>) => {\r\n      state.video_display_type = action.payload;\r\n      writeVideoDisplayType(action.payload);\r\n    },\r\n    setSetManagementButtonType: (state, action: PayloadAction<SetManagementButtonType>) => {\r\n      state.set_management_button_type = action.payload;\r\n      writeSetManagementButtonType(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { clear, setLogin, setImageDisplaySize, setVideoDisplaySize, setVideoDisplayType, setSetManagementButtonType } = settingsSlice.actions;\r\n\r\nexport const selectUsername = (state: RootState) => state.settings.username;\r\nexport const selectAPIKey = (state: RootState) => state.settings.api_key;\r\nexport const selectImageDisplaySize = (state: RootState) => state.settings.image_display_size;\r\nexport const selectVideoDisplaySize = (state: RootState) => state.settings.video_display_size;\r\nexport const selectVideoDisplayType = (state: RootState) => state.settings.video_display_type;\r\nexport const selectSetManagementButtonType = (state: RootState) => state.settings.set_management_button_type;\r\n\r\nexport default settingsSlice.reducer;\r\n","import axios from 'axios';\r\nimport rateLimit from 'axios-rate-limit';\r\nimport { readAPIKey, readUsername } from '../../slices/settingsSlice';\r\n\r\nconst USER_AGENT = \"SanguineDerg's Slideshow/1.0 (by SanguineDerg on e621)\";\r\n\r\nconst _axios = axios.create({\r\n  baseURL: 'https://e621.net/',\r\n});\r\n\r\n_axios.interceptors.request.use(config => {\r\n  // Add user agent through URL params\r\n  config.params = {\r\n    ...config.params,\r\n    _client: USER_AGENT,\r\n  };\r\n\r\n  // Add HTTP Basic Auth\r\n  const username = readUsername();\r\n  const apiKey = readAPIKey();\r\n  if (username !== '' && apiKey !== '') {\r\n    config.auth = {\r\n      username: username,\r\n      password: apiKey,\r\n    };\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport const e621 = rateLimit(_axios, {maxRPS: 1});\r\n","import { readImageDisplaySize } from '../../slices/settingsSlice';\r\nimport { e621 } from './config';\r\nimport { Post } from './interfaces/posts';\r\n\r\nconst PostAPI = {\r\n  // Fetch list of posts\r\n  getPosts: (options: {\r\n    limit?: number;\r\n    tags?: string;\r\n    page?: number | string;\r\n  } = {}) => {\r\n    return e621.get<{posts: Post[]}>('posts.json', {params: options});\r\n  }\r\n}\r\n\r\nexport const getPostMediaType = (post: Post) => {\r\n  switch (post.file.ext) {\r\n    case 'jpg':\r\n    case 'png':\r\n    case 'gif':\r\n      return 'image';\r\n    case 'webm':\r\n      return 'video';\r\n    case 'swf':\r\n      return 'flash';\r\n  }\r\n}\r\n\r\nconst getPostImageURL = (post: Post) => {\r\n  if (post.file.url === null) return getPostImageBypassURL(post);\r\n  const imageDisplaySize = readImageDisplaySize();\r\n  switch (imageDisplaySize) {\r\n    case 'full':\r\n      return post.file.url;\r\n    case 'sample':\r\n      return post.sample.url;\r\n  }\r\n}\r\n\r\nconst getPostImageBypassURL = (post: Post) => {\r\n  const imageDisplaySize = readImageDisplaySize();\r\n  const md5 = post.file.md5;\r\n  switch (imageDisplaySize) {\r\n    case 'full':\r\n      return `https://static1.e621.net/data/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n    case 'sample':\r\n      if (!post.sample.has) return `https://static1.e621.net/data/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n      return `https://static1.e621.net/data/sample/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n  }\r\n}\r\n\r\nexport const getPostMediaURL = (post: Post) => {\r\n  // TODO add URLs for videos and flash\r\n  switch (getPostMediaType(post)) {\r\n    case 'image':\r\n      return getPostImageURL(post);\r\n    case 'video':\r\n      return '';\r\n    case 'flash':\r\n      return '';\r\n  }\r\n}\r\n\r\nexport default PostAPI\r\n","import { e621 } from './config';\r\nimport { ManagedSets, Set } from './interfaces/sets';\r\n\r\nconst SetsAPI = {\r\n  // Fetch sets owned or maintained by the current user\r\n  getManagedSets: () => {\r\n    return e621.get<ManagedSets>('post_sets/for_select.json');\r\n  },\r\n  // Fetches a set by id\r\n  getSetById: (setId: number) => {\r\n    return e621.get<Set>(`post_sets/${setId}.json`);\r\n  },\r\n  // Adds a post to a set\r\n  addPostToSet: (postId: number, setId: number) => {\r\n    const formData = new FormData();\r\n    formData.append('post_ids[]', postId.toString());\r\n    return e621.post<Set>(`post_sets/${setId}/add_posts.json`, formData);\r\n  },\r\n  // Removes a post from a set\r\n  removePostFromSet: (postId: number, setId: number) => {\r\n    const formData = new FormData();\r\n    formData.append('post_ids[]', postId.toString());\r\n    return e621.post<Set>(`post_sets/${setId}/remove_posts.json`, formData);\r\n  },\r\n}\r\n\r\nexport default SetsAPI\r\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { ManagedSets, Set } from '../api/e621/interfaces/sets';\r\nimport SetsAPI from '../api/e621/sets';\r\nimport { readLocalStorage, writeLocalStorage } from '../app/localStorage';\r\nimport { RootState } from '../app/store';\r\n\r\nexport interface SetState {\r\n  managed_sets: ManagedSets | null;\r\n  working_set_id: number | null;\r\n  working_set: Set | null;\r\n  update_set_status: 'idle' | 'working' | 'added' | 'removed' | 'failed';\r\n}\r\n\r\nconst initialState: SetState = {\r\n  managed_sets: null,\r\n  working_set_id: null,\r\n  working_set: null,\r\n  update_set_status: 'idle',\r\n};\r\n\r\nexport const readWorkingSetId = () => readLocalStorage('sets.working_set_id', initialState.working_set_id);\r\n\r\nexport const writeWorkingSetId = (workingSetId: number | null) => writeLocalStorage('sets.working_set_id', workingSetId);\r\n\r\nexport const getLocalStorageSets = () => {\r\n  return {\r\n    ...initialState,\r\n    working_set_id: readWorkingSetId(),\r\n  } as SetState;\r\n}\r\n\r\nexport const fetchManagedSets = createAsyncThunk(\r\n  'sets/fetchManagedSets',\r\n  async () => {\r\n    const response = await SetsAPI.getManagedSets();\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchWorkingSet = createAsyncThunk<\r\n  Set | null,\r\n  void,\r\n  {state: RootState}\r\n>(\r\n  'sets/fetchWorkingSet',\r\n  async (_, thunkAPI) => {\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (setId === null) return null;\r\n    const response = await SetsAPI.getSetById(setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const addCurrentPostToSet = createAsyncThunk<\r\n  Set | null,\r\n  number,\r\n  {state: RootState}\r\n>(\r\n  'sets/addCurrentPostToSet',\r\n  async (postId, thunkAPI) => {\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (setId === null) return null;\r\n    const response = await SetsAPI.addPostToSet(postId, setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const removeCurrentPostFromSet = createAsyncThunk<\r\n  Set | null,\r\n  number,\r\n  {state: RootState}\r\n>(\r\n  'sets/removeCurrentPostFromSet',\r\n  async (postId, thunkAPI) => {\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (setId === null) return null;\r\n    const response = await SetsAPI.removePostFromSet(postId, setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const setSlice = createSlice({\r\n  name: 'sets',\r\n  initialState,\r\n  reducers: {\r\n    setWorkingSetId: (state, action: PayloadAction<number | null>) => {\r\n      state.working_set_id = action.payload;\r\n      state.working_set = null;\r\n      writeWorkingSetId(action.payload);\r\n    },\r\n    resetUpdateSetStatus: (state) => {\r\n      state.update_set_status = 'idle';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchManagedSets.fulfilled, (state, action) => {\r\n        state.managed_sets = action.payload;\r\n      })\r\n      .addCase(fetchManagedSets.rejected, (state, action) => {\r\n        // Sets could not be fetched, probably not logged in\r\n        state.managed_sets = null;\r\n        state.working_set_id = null;\r\n        state.working_set = null;\r\n        writeWorkingSetId(null);\r\n      })\r\n      .addCase(fetchWorkingSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n      })\r\n      .addCase(fetchWorkingSet.rejected, (state, action) => {\r\n        state.working_set = null;\r\n      })\r\n      .addCase(addCurrentPostToSet.pending, (state, action) => {\r\n        state.update_set_status = 'working';\r\n      })\r\n      .addCase(addCurrentPostToSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n        if (action.payload === null) {\r\n          state.update_set_status = 'failed';\r\n        } else {\r\n          state.update_set_status = 'added';\r\n        }\r\n      })\r\n      .addCase(addCurrentPostToSet.rejected, (state, action) => {\r\n        state.update_set_status = 'failed';\r\n      })\r\n      .addCase(removeCurrentPostFromSet.pending, (state, action) => {\r\n        state.update_set_status = 'working';\r\n      })\r\n      .addCase(removeCurrentPostFromSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n        if (action.payload === null) {\r\n          state.update_set_status = 'failed';\r\n        } else {\r\n          state.update_set_status = 'removed';\r\n        }\r\n      })\r\n      .addCase(removeCurrentPostFromSet.rejected, (state, action) => {\r\n        state.update_set_status = 'failed';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setWorkingSetId, resetUpdateSetStatus } = setSlice.actions;\r\n\r\nexport const selectManagedSets = (state: RootState) => state.sets.managed_sets;\r\nexport const selectWorkingSetId = (state: RootState) => state.sets.working_set_id;\r\nexport const selectWorkingSet = (state: RootState) => state.sets.working_set;\r\nexport const selectUpdateSetStatus = (state: RootState) => state.sets.update_set_status;\r\n\r\nexport default setSlice.reducer;\r\n","import { createSlice, PayloadAction, createAsyncThunk, createSelector } from '@reduxjs/toolkit';\r\nimport { AxiosError } from 'axios';\r\nimport { Post } from '../api/e621/interfaces/posts';\r\nimport PostAPI from '../api/e621/posts';\r\nimport { RootState, AppThunk } from '../app/store';\r\nimport { resetUpdateSetStatus, selectWorkingSet } from './setSlice';\r\n\r\nexport interface PostsState {\r\n  posts: {[key: number]: Post};\r\n  fetch_order: number[];\r\n  fetch_tags: string;\r\n  fetch_page: number;\r\n  fetch_status: 'idle' | 'loading' | 'failed' | 'finished';\r\n  fetch_id: string;\r\n  fetch_error: string | null;\r\n  slideshow_index: number;\r\n}\r\n\r\nconst initialState: PostsState = {\r\n  posts: {},\r\n  fetch_order: [],\r\n  fetch_tags: '',\r\n  fetch_page: 1,\r\n  fetch_status: 'idle',\r\n  fetch_id: '',\r\n  fetch_error: null,\r\n  slideshow_index: 0,\r\n};\r\n\r\nconst fetchPosts = createAsyncThunk<\r\n  Post[],\r\n  void,\r\n  {\r\n    state: RootState,\r\n    rejectValue: Error | AxiosError,\r\n  }\r\n>(\r\n  'posts/fetchPosts',\r\n  async (_, thunkAPI) => {\r\n    return PostAPI.getPosts({\r\n      tags: selectTags(thunkAPI.getState()),\r\n      page: selectPage(thunkAPI.getState()),\r\n    }).then((response) => {\r\n      return response.data.posts;\r\n    }).catch((error: Error | AxiosError) => {\r\n      return thunkAPI.rejectWithValue(error);\r\n    });\r\n  }\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state.fetch_order = [];\r\n      state.fetch_tags = '';\r\n      state.fetch_page = 1;\r\n      state.fetch_status = 'idle';\r\n      state.fetch_id = '';\r\n      state.slideshow_index = 0;\r\n    },\r\n    startSearch: (state, action: PayloadAction<string>) => {\r\n      state.fetch_order = [];\r\n      state.fetch_tags = action.payload;\r\n      state.fetch_page = 1;\r\n      state.fetch_status = 'idle';\r\n      state.fetch_id = '';\r\n      state.slideshow_index = 0;\r\n    },\r\n    previousSlide: (state) => {\r\n      if (state.slideshow_index !== 0) {\r\n        state.slideshow_index -= 1;\r\n      }\r\n    },\r\n    nextSlide: (state) => {\r\n      if (state.slideshow_index < state.fetch_order.length - 1) {\r\n        state.slideshow_index += 1;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.fetch_status = 'loading';\r\n        state.fetch_id = action.meta.requestId;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        // Check if the fetch was cancelled\r\n        if (action.meta.requestId !== state.fetch_id) return;\r\n        const posts = action.payload;\r\n        if (posts.length === 0) {\r\n          state.fetch_status = 'finished';\r\n          state.fetch_page = 0;\r\n          state.fetch_id = '';\r\n        } else {\r\n          state.fetch_status = 'idle';\r\n          state.fetch_page = state.fetch_page && state.fetch_page + 1;\r\n          state.fetch_id = '';\r\n          posts.forEach(post => {\r\n            state.posts[post.id] = post;\r\n            state.fetch_order.push(post.id);\r\n          });\r\n        }\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.fetch_error = `${action.payload}`;\r\n        state.fetch_status = 'failed';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clear, startSearch, previousSlide, nextSlide } = postsSlice.actions;\r\n\r\nexport const selectTags = (state: RootState) => state.posts.fetch_tags;\r\nexport const selectPage = (state: RootState) => state.posts.fetch_page;\r\nexport const selectFetchStatus = (state: RootState) => state.posts.fetch_status;\r\nexport const selectFetchOrder = (state: RootState) => state.posts.fetch_order;\r\nexport const selectPosts = (state: RootState) => state.posts.posts;\r\nexport const selectFetchError = (state: RootState) => state.posts.fetch_error;\r\n\r\nexport const selectSlideshowIndex = (state: RootState) => state.posts.slideshow_index;\r\n\r\nexport const selectCacheIndices = createSelector([selectSlideshowIndex, selectFetchOrder], (index, order) => {\r\n  // TODO add settings for cache size\r\n  const indices = Array.from({length: 6}, (_, i) => i + index - 2);\r\n  return indices.filter((i) => i >= 0 && i < order.length);\r\n});\r\n\r\nexport const selectCurrentSlideshowPost = createSelector([selectPosts, selectFetchOrder, selectSlideshowIndex], (posts, order, index) => {\r\n  if (order.length === 0) return null;\r\n  return posts[order[index]];\r\n});\r\n\r\nexport const selectCurrentSlideshowPostId = createSelector([selectCurrentSlideshowPost], (post) => {\r\n  return post !== null ? post.id : null;\r\n});\r\n\r\nexport const selectIsCurrentPostInSet = createSelector([selectCurrentSlideshowPostId, selectWorkingSet], (postId, set) => {\r\n  return (postId !== null && set !== null) ? set.post_ids.includes(postId) : false;\r\n});\r\n\r\nexport const selectCachePosts = createSelector([selectPosts, selectFetchOrder, selectCacheIndices], (posts, order, indices) => {\r\n  if (order.length === 0) return [];\r\n  return indices.map(index => posts[order[index]]);\r\n});\r\n\r\nexport const tryFetchPosts = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const status = selectFetchStatus(getState());\r\n  if (status === 'idle') {\r\n    dispatch(fetchPosts());\r\n  }\r\n};\r\n\r\nexport const startSearchAndFetch = (tags: string): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(startSearch(tags));\r\n  dispatch(fetchPosts());\r\n  dispatch(resetUpdateSetStatus());\r\n};\r\n\r\nexport const nextSlideAndPrefetch = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(nextSlide());\r\n  dispatch(resetUpdateSetStatus());\r\n  const index = selectSlideshowIndex(getState());\r\n  const order = selectFetchOrder(getState());\r\n  if (index >= order.length - 5) {\r\n    dispatch(tryFetchPosts());\r\n  }\r\n};\r\n\r\nexport const previousSlideAndPrefetch = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(previousSlide());\r\n  dispatch(resetUpdateSetStatus());\r\n  const index = selectSlideshowIndex(getState());\r\n  const order = selectFetchOrder(getState());\r\n  if (index >= order.length - 5) {\r\n    dispatch(tryFetchPosts());\r\n  }\r\n};\r\n\r\nexport default postsSlice.reducer;\r\n","import { getPostMediaType, getPostMediaURL } from '../../api/e621/posts';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { selectCachePosts } from '../../slices/postsSlice';\r\nimport styles from './Cache.module.css';\r\n\r\nexport default function Cache() {\r\n  const cachePosts = useAppSelector(selectCachePosts);\r\n\r\n  return (\r\n    <div className={styles.cache}>\r\n      {cachePosts.map(post => {\r\n        return (getPostMediaType(post) === 'image') && (<img key={post.id} src={getPostMediaURL(post)} alt=\"\" />);\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { FormEvent, useCallback, useState } from 'react';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { startSearchAndFetch } from '../../slices/postsSlice';\r\nimport { switchScreen } from '../../slices/viewSlice';\r\nimport styles from './Search.module.css';\r\n\r\nexport default function Search() {\r\n  const [tags, setTags] = useState('');\r\n  const dispatch = useAppDispatch();\r\n\r\n  const submit = useCallback((e: FormEvent) => {\r\n    dispatch(startSearchAndFetch(tags));\r\n    dispatch(switchScreen('slideshow'));\r\n    e.preventDefault();\r\n  }, [dispatch, tags]);\r\n\r\n  const openSettings = useCallback(() => {\r\n    dispatch(switchScreen('settings'));\r\n  }, [dispatch]);\r\n\r\n  const openAbout = useCallback(() => {\r\n    dispatch(switchScreen('about'));\r\n  }, [dispatch]);\r\n\r\n  const close = useCallback(() => {\r\n    dispatch(switchScreen('slideshow'));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.searchContainer}>\r\n      <h1>Search</h1>\r\n      <form onSubmit={submit} className={styles.searchForm}>\r\n        <input value={tags} onChange={e => setTags(e.target.value)} type=\"text\" placeholder=\"rating:s ...\" />\r\n        <button type=\"submit\">Search</button>\r\n        <button type=\"button\" onClick={close}>Close</button>\r\n        <button type=\"button\" onClick={openSettings}>Settings</button>\r\n        <button type=\"button\" onClick={openAbout}>About</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import { useCallback, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { ImageDisplaySize, selectImageDisplaySize, selectSetManagementButtonType, selectUsername, setImageDisplaySize, setLogin, SetManagementButtonType, setSetManagementButtonType } from '../../slices/settingsSlice';\r\nimport { fetchManagedSets, fetchWorkingSet, selectManagedSets, selectWorkingSetId, setWorkingSetId } from '../../slices/setSlice';\r\nimport { switchScreen } from '../../slices/viewSlice';\r\nimport styles from './Settings.module.css';\r\n\r\nexport default function Settings() {\r\n  const [username, setLocalUsername] = useState('');\r\n  const [apiKey, setLocalAPIKey] = useState('');\r\n\r\n  const currentUsername = useAppSelector(selectUsername);\r\n  const currentImageDisplaySize = useAppSelector(selectImageDisplaySize);\r\n  const managedSets = useAppSelector(selectManagedSets);\r\n  const workingSetId = useAppSelector(selectWorkingSetId);\r\n  const currentSetManagementButtonType = useAppSelector(selectSetManagementButtonType);\r\n  \r\n  const dispatch = useAppDispatch();\r\n\r\n  const saveLogin = useCallback(() => {\r\n    dispatch(setLogin({username: username, apiKey: apiKey}));\r\n    setLocalUsername('');\r\n    setLocalAPIKey('');\r\n  }, [dispatch, username, apiKey]);\r\n\r\n  const close = useCallback(() => {\r\n    dispatch(fetchWorkingSet());\r\n    dispatch(switchScreen('search'));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.settingsContainer}>\r\n      <h1>Settings</h1>\r\n\r\n      <button onClick={close}>Close</button>\r\n\r\n      <fieldset>\r\n        <legend>Login</legend>\r\n        <span>{currentUsername !== '' ? `Logged in as ${currentUsername}` : 'Not logged in'}</span>\r\n        <input value={username} onChange={e => setLocalUsername(e.target.value)} type=\"text\" />\r\n        <input value={apiKey} onChange={e => setLocalAPIKey(e.target.value)} type=\"password\" />\r\n        <button type=\"button\" onClick={saveLogin}>Save Login</button>\r\n      </fieldset>\r\n      \r\n      <fieldset>\r\n        <legend>Set Management</legend>\r\n        <button onClick={() => dispatch(fetchManagedSets())}>Get sets</button>\r\n        {managedSets !== null && (\r\n          <>\r\n            <select value={workingSetId !== null ? workingSetId : undefined} onChange={e => dispatch(setWorkingSetId(e.target.value !== \"\" ? parseInt(e.target.value) : null))}>\r\n              <option>Select a set</option>\r\n              <optgroup label=\"Owned\">\r\n                {managedSets.Owned.map(([setName, setId], index) => (\r\n                  <option value={setId} key={index}>{setName}</option>\r\n                ))}\r\n              </optgroup>\r\n              <optgroup label=\"Maintained\">\r\n                {managedSets.Maintained.map(([setName, setId], index) => (\r\n                  <option value={setId} key={index}>{setName}</option>\r\n                ))}\r\n              </optgroup>\r\n            </select>\r\n          </>\r\n        )}\r\n      </fieldset>\r\n      \r\n      <fieldset>\r\n        <legend>Display</legend>\r\n        <label>\r\n          Image size\r\n        </label>\r\n        <select value={currentImageDisplaySize} onChange={e => dispatch(setImageDisplaySize(e.target.value as ImageDisplaySize))}>\r\n          <option value=\"full\">Full Image</option>\r\n          <option value=\"sample\">Sample Image</option>\r\n        </select>\r\n        <label>\r\n          Set Management Button Size\r\n        </label>\r\n        <select value={currentSetManagementButtonType} onChange={e => dispatch(setSetManagementButtonType(e.target.value as SetManagementButtonType))}>\r\n          <option value=\"mobile\">Mobile</option>\r\n          <option value=\"desktop\">Desktop</option>\r\n        </select>\r\n      </fieldset>\r\n\r\n      <button onClick={close}>Close</button>\r\n    </div>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport { getPostMediaType, getPostMediaURL } from '../../api/e621/posts';\r\nimport { selectCurrentSlideshowPost, selectFetchError, selectFetchStatus } from '../../slices/postsSlice';\r\nimport styles from './Display.module.css'\r\n\r\nexport function Display() {\r\n  const currentPost = useSelector(selectCurrentSlideshowPost);\r\n  const status = useSelector(selectFetchStatus);\r\n  const error = useSelector(selectFetchError);\r\n\r\n  const currentFiletype = currentPost !== null ? getPostMediaType(currentPost) : null;\r\n\r\n  return (\r\n    <div className={styles.displayContainer}>\r\n      {currentFiletype === 'image' && (\r\n        <img className={styles.image} src={currentPost !== null ? (getPostMediaURL(currentPost)) : undefined} alt=\"\" />\r\n      )}\r\n      {currentFiletype === 'video' && (\r\n        <div className={styles.text}><span>Video</span></div>\r\n      )}\r\n      {currentFiletype === 'flash' && (\r\n        <div className={styles.text}><span>Flash</span></div>\r\n      )}\r\n      {currentFiletype === null && status === 'loading' && (\r\n        <div className={styles.text}><span>Loading</span></div>\r\n      )}\r\n      {currentFiletype === null && error !== null && (\r\n        <div className={styles.text}><span>An error occurred: {error}</span></div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import { useCallback, useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { ButtonIcon } from '../../common/buttons';\r\nimport { selectCurrentSlideshowPostId, selectIsCurrentPostInSet } from '../../slices/postsSlice';\r\nimport { addCurrentPostToSet, removeCurrentPostFromSet, selectUpdateSetStatus, selectWorkingSet } from '../../slices/setSlice';\r\nimport { selectSetManagementButtonType } from '../../slices/settingsSlice';\r\nimport styles from './ManageSetButton.module.css';\r\n\r\nexport default function ManageSetButton() {\r\n  const updateSetState = useAppSelector(selectUpdateSetStatus);\r\n  const currentPostId = useAppSelector(selectCurrentSlideshowPostId);\r\n  const isPostInSet = useAppSelector(selectIsCurrentPostInSet);\r\n  const workingSet = useAppSelector(selectWorkingSet);\r\n  const buttonType = useAppSelector(selectSetManagementButtonType);\r\n\r\n  const [icon, setIcon] = useState<ButtonIcon>('empty');\r\n  const [className, setClassName] = useState<string>(styles.manageSetButton);\r\n  const [backgroundColor, setBackgroundColor] = useState('transparent')\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    switch (updateSetState) {\r\n      case 'idle':\r\n      case 'added':\r\n      case 'removed':\r\n        setBackgroundColor('transparent');\r\n        setIcon(isPostInSet ? 'remove' : 'add');\r\n        break;\r\n      case 'working':\r\n        setBackgroundColor('transparent');\r\n        setIcon('working');\r\n        break;\r\n      case 'failed':\r\n        setBackgroundColor('rgba(255,0,0,0.1)');\r\n        setIcon(isPostInSet ? 'remove' : 'add');\r\n        break;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [updateSetState, isPostInSet]);\r\n\r\n  useEffect(() => {\r\n    switch (buttonType) {\r\n      case 'mobile':\r\n        setClassName(`${styles.manageSetButton} ${styles.mobile}`);\r\n        break;\r\n      case 'desktop':\r\n      default:\r\n        setClassName(styles.manageSetButton);\r\n        break;\r\n    }\r\n  }, [buttonType]);\r\n\r\n  const tryAddToSet = useCallback(() => {\r\n    if (currentPostId === null || updateSetState === 'working' || isPostInSet) return;\r\n    dispatch(addCurrentPostToSet(currentPostId));\r\n  }, [dispatch, currentPostId, updateSetState, isPostInSet]);\r\n\r\n  const tryRemoveFromSet = useCallback(() => {\r\n    if (currentPostId === null || updateSetState === 'working' || !isPostInSet) return;\r\n    dispatch(removeCurrentPostFromSet(currentPostId));\r\n  }, [dispatch, currentPostId, updateSetState, isPostInSet]);\r\n\r\n  const keydownHandler = useCallback((e: KeyboardEvent) => {\r\n    if (e.repeat) return;\r\n    switch (e.key) {\r\n      case 'ArrowUp':\r\n        tryAddToSet();\r\n        return;\r\n      case 'ArrowDown':\r\n        tryRemoveFromSet();\r\n        return;\r\n      default: return;\r\n    }\r\n  }, [tryAddToSet, tryRemoveFromSet]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', keydownHandler, true);\r\n    return () => window.removeEventListener('keydown', keydownHandler, true);\r\n  }, [keydownHandler]);\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (updateSetState === 'working' || currentPostId === null) return;\r\n    if (isPostInSet) {\r\n      dispatch(removeCurrentPostFromSet(currentPostId));\r\n    } else {\r\n      dispatch(addCurrentPostToSet(currentPostId));\r\n    }\r\n  }, [dispatch, currentPostId, isPostInSet, updateSetState]);\r\n  \r\n  if (currentPostId === null || workingSet === null) return null;\r\n\r\n  return (\r\n    <button className={className} onClick={handleClick} style={{backgroundImage: `url(\"${process.env.PUBLIC_URL}/buttons/${icon}.svg\")`, backgroundColor: backgroundColor}}>\r\n    </button>\r\n  );\r\n}","import { useCallback, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { nextSlideAndPrefetch, previousSlideAndPrefetch, selectCurrentSlideshowPost } from '../../slices/postsSlice';\r\nimport { switchScreen } from '../../slices/viewSlice';\r\nimport styles from './Interface.module.css';\r\nimport ManageSetButton from './ManageSetButton';\r\n\r\nexport function Interface() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentPost = useAppSelector(selectCurrentSlideshowPost);\r\n  \r\n  const nextSlide = useCallback(() => {\r\n    dispatch(nextSlideAndPrefetch());\r\n  }, [dispatch]);\r\n  \r\n  const prevSlide = useCallback(() => {\r\n    dispatch(previousSlideAndPrefetch());\r\n  }, [dispatch]);\r\n\r\n  const keydownHandler = useCallback((e: KeyboardEvent) => {\r\n    if (e.repeat) return;\r\n    switch (e.key) {\r\n      case 'ArrowLeft':\r\n        prevSlide();\r\n        return;\r\n      case 'ArrowRight':\r\n        nextSlide();\r\n        return;\r\n      default: return;\r\n    }\r\n  }, [nextSlide, prevSlide]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', keydownHandler, true);\r\n    return () => window.removeEventListener('keydown', keydownHandler, true);\r\n  }, [keydownHandler]);\r\n\r\n  return (\r\n    <div className={styles.interfaceContainer}>\r\n      <div className={styles.mainControls}>\r\n        <div className={styles.nextSlide} onClick={nextSlide}>Next</div>\r\n        <div className={styles.previousSlide} onClick={prevSlide}>Previous</div>\r\n        <div className={styles.exitSlideshow} onClick={() => dispatch(switchScreen('search'))}>Close</div>\r\n        <a className={styles.viewSource} target=\"_blank\" rel=\"noopener noreferrer\" {...(currentPost === null ? {onClick: () => {}} : {href: `https://e621.net/posts/${currentPost.id}`})}>Link</a>\r\n      </div>\r\n      <div className={styles.extraControls}>\r\n        <ManageSetButton />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { Display } from '../display/Display';\r\nimport { Interface } from '../interface/Interface';\r\nimport styles from './Slideshow.module.css';\r\n\r\nexport function Slideshow() {\r\n  return (\r\n    <div className={styles.slideshowContainer}>\r\n      <Display />\r\n      <Interface />\r\n    </div>\r\n  );\r\n}","import { PropsWithChildren } from 'react';\r\nimport styles from './View.module.css';\r\n\r\ninterface ViewProps {\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport default function View({visible = true, disabled = false, children}: PropsWithChildren<ViewProps>) {\r\n  return (\r\n    <div className={styles.view + ' ' + (visible ? styles.visible : styles.hidden)}>\r\n      {!disabled && children}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { useAppSelector } from './app/hooks';\r\nimport About from './components/about/About';\r\nimport Cache from './components/cache/Cache';\r\nimport Search from './components/search/Search';\r\nimport Settings from './components/settings/Settings';\r\nimport { Slideshow } from './components/slideshow/Slideshow';\r\nimport View from './components/view/View';\r\nimport { selectScreen } from './slices/viewSlice';\r\n\r\nfunction App() {\r\n  const screen = useAppSelector(selectScreen);\r\n  return (\r\n    <div className=\"App\">\r\n      <Cache />\r\n      <View disabled={screen !== 'slideshow'} ><Slideshow /></View>\r\n      <View visible={screen === 'search'} ><Search /></View>\r\n      <View visible={screen === 'settings'} ><Settings /></View>\r\n      <View visible={screen === 'about'} ><About /></View>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport postsReducer from '../slices/postsSlice';\nimport settingsSlice, { getLocalStorageSettings } from '../slices/settingsSlice';\nimport setSlice, { getLocalStorageSets } from '../slices/setSlice';\nimport viewReducer from '../slices/viewSlice';\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    view: viewReducer,\n    settings: settingsSlice,\n    sets: setSlice,\n  },\n  preloadedState: {\n    sets: getLocalStorageSets(),\n    settings: getLocalStorageSettings(),\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { fetchManagedSets } from './slices/setSlice';\n\nstore.dispatch(fetchManagedSets());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"interfaceContainer\":\"Interface_interfaceContainer__32rjR\",\"mainControls\":\"Interface_mainControls__1f-3y\",\"extraControls\":\"Interface_extraControls__3sxVc\",\"fadeout\":\"Interface_fadeout__3FYND\",\"nextSlide\":\"Interface_nextSlide__1oMMA\",\"previousSlide\":\"Interface_previousSlide__1G1Z_\",\"exitSlideshow\":\"Interface_exitSlideshow__1-rsM\",\"viewSource\":\"Interface_viewSource__1ikEu\"};"],"sourceRoot":""}