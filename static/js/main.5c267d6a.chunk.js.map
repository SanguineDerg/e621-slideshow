{"version":3,"sources":["components/display/Display.module.css","components/view/View.module.css","components/cache/Cache.module.css","components/interface/ManageSetButton.module.css","components/slideshow/Slideshow.module.css","components/interface/Interface.module.css","app/hooks.ts","slices/settingsSlice.ts","api/e621/config.ts","api/e621/posts.ts","slices/postsSlice.ts","components/cache/Cache.tsx","slices/viewSlice.ts","components/search/Search.tsx","api/e621/sets.ts","slices/setSlice.ts","components/settings/Settings.tsx","components/display/Display.tsx","components/interface/ManageSetButton.tsx","components/interface/Interface.tsx","components/slideshow/Slideshow.tsx","components/view/View.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","readSetting","name","fallback","store","localStorage","getItem","JSON","parse","writeSetting","setting","setItem","stringify","initialState","username","api_key","image_display_size","video_display_size","video_display_type","readUsername","readAPIKey","readImageDisplaySize","writeUsername","writeAPIKey","apiKey","settingsSlice","createSlice","reducers","clear","state","setLogin","action","payload","setImageDisplaySize","setVideoDisplaySize","setVideoDisplayType","actions","selectUsername","settings","selectImageDisplaySize","_axios","axios","create","baseURL","interceptors","request","use","config","params","_client","auth","password","e621","rateLimit","maxRPS","PostAPI","getPosts","options","get","getPostMediaType","post","file","ext","getPostImageBypassURL","imageDisplaySize","md5","substring","sample","has","getPostMediaURL","url","getPostImageURL","fetchPosts","createAsyncThunk","_","thunkAPI","a","tags","selectTags","getState","page","selectPage","response","data","posts","postsSlice","fetch_order","fetch_tags","fetch_page","fetch_status","fetch_id","slideshow_index","startSearch","previousSlide","nextSlide","length","extraReducers","builder","addCase","pending","meta","requestId","fulfilled","forEach","id","push","selectFetchOrder","selectPosts","selectSlideshowIndex","selectCacheIndices","createSelector","index","order","Array","from","i","filter","selectCurrentSlideshowPost","selectCurrentSlideshowPostId","selectCachePosts","indices","map","tryFetchPosts","dispatch","Cache","cachePosts","className","styles","cache","src","alt","viewSlice","screen","switchScreen","selectScreen","view","Search","useState","setTags","value","onChange","e","target","type","onClick","startSearchAndFetch","SetsAPI","getManagedSets","addPostToSet","postId","setId","formData","FormData","append","toString","fetchManagedSets","addCurrentPostToSet","selectWorkingSetId","setSlice","managed_sets","working_set_id","working_set","update_set_status","setWorkingSetId","rejected","selectManagedSets","sets","selectIsCurrentPostInSet","set","post_ids","includes","Settings","setLocalUsername","setLocalAPIKey","currentUsername","currentImageDisplaySize","managedSets","workingSetId","undefined","parseInt","label","Owned","setName","Maintained","Display","currentPost","currentFiletype","displayContainer","image","text","ManageSetButton","isPostInSet","manageSetButton","Interface","interfaceContainer","mainControls","exitSlideshow","viewSource","rel","href","extraControls","Slideshow","slideshowContainer","View","props","visible","hidden","children","App","configureStore","reducer","postsReducer","viewReducer","preloadedState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c267d6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Display_displayContainer__1y-B5\",\"image\":\"Display_image__1JJz2\",\"text\":\"Display_text__1LbkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"View_view__2vr6n\",\"hidden\":\"View_hidden__2bpX_\",\"visible\":\"View_visible__v_6PK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cache\":\"Cache_cache__Nm8x0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"manageSetButton\":\"ManageSetButton_manageSetButton__2Mv6b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slideshowContainer\":\"Slideshow_slideshowContainer__3_r4l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"interfaceContainer\":\"Interface_interfaceContainer__32rjR\",\"mainControls\":\"Interface_mainControls__1f-3y\",\"extraControls\":\"Interface_extraControls__3sxVc\",\"fadeout\":\"Interface_fadeout__3FYND\",\"nextSlide\":\"Interface_nextSlide__1oMMA\",\"previousSlide\":\"Interface_previousSlide__1G1Z_\",\"exitSlideshow\":\"Interface_exitSlideshow__1-rsM\",\"viewSource\":\"Interface_viewSource__1ikEu\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\nfunction readSetting<SettingType>(name: string, fallback: SettingType): SettingType {\r\n  const store = localStorage.getItem(name);\r\n  if (store === null) return fallback;\r\n  try {\r\n    const setting: SettingType = JSON.parse(store);\r\n    return setting;\r\n  } catch {\r\n    return fallback;\r\n  }\r\n}\r\n\r\nfunction writeSetting<SettingType>(name: string, setting: SettingType): boolean {\r\n  try {\r\n    localStorage.setItem(name, JSON.stringify(setting));\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport type ImageDisplaySize = 'full' | 'sample';\r\nexport type VideoDisplaySize = 'full' | '720p' | '480p';\r\nexport type VideoDisplayType = 'webm' | 'mp4';\r\n\r\nexport interface SettingsState {\r\n  username: string;\r\n  api_key: string;\r\n  image_display_size: ImageDisplaySize;\r\n  video_display_size: VideoDisplaySize;\r\n  video_display_type: VideoDisplayType;\r\n}\r\n\r\nconst initialState: SettingsState = {\r\n  username: '',\r\n  api_key: '',\r\n  image_display_size: 'sample',\r\n  video_display_size: '720p',\r\n  video_display_type: 'mp4',\r\n};\r\n\r\nexport const readUsername = () => readSetting('settings.username', initialState.username);\r\nexport const readAPIKey = () => readSetting('settings.api_key', initialState.api_key);\r\nexport const readImageDisplaySize = () => readSetting('settings.image_display_size', initialState.image_display_size);\r\nexport const readVideoDisplaySize = () => readSetting('settings.video_display_size', initialState.video_display_size);\r\nexport const readVideoDisplayType = () => readSetting('settings.video_display_type', initialState.video_display_type);\r\n\r\nexport const writeUsername = (username: string) => writeSetting('settings.username', username);\r\nexport const writeAPIKey = (apiKey: string) => writeSetting('settings.api_key', apiKey);\r\nexport const writeImageDisplaySize = (imageDisplaySize: ImageDisplaySize) => writeSetting('settings.image_display_size', imageDisplaySize);\r\nexport const writeVideoDisplaySize = (videoDisplaySize: VideoDisplaySize) => writeSetting('settings.video_display_size', videoDisplaySize);\r\nexport const writeVideoDisplayType = (videoDisplayType: VideoDisplayType) => writeSetting('settings.video_display_type', videoDisplayType);\r\n\r\nexport const getLocalStorageSettings = () => {\r\n  return {\r\n    username: readUsername(),\r\n    api_key: readAPIKey(),\r\n    image_display_size: readImageDisplaySize(),\r\n    video_display_size: readVideoDisplaySize(),\r\n    video_display_type: readVideoDisplayType(),\r\n  } as SettingsState;\r\n}\r\n\r\nexport const settingsSlice = createSlice({\r\n  name: 'settings',\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state = initialState;\r\n      writeUsername(initialState.username);\r\n      writeAPIKey(initialState.api_key);\r\n    },\r\n    setLogin: (state, action: PayloadAction<{username: string, apiKey: string}>) => {\r\n      state.username = action.payload.username;\r\n      state.api_key = action.payload.apiKey;\r\n      writeUsername(action.payload.username);\r\n      writeAPIKey(action.payload.apiKey);\r\n    },\r\n    setImageDisplaySize: (state, action: PayloadAction<ImageDisplaySize>) => {\r\n      state.image_display_size = action.payload;\r\n      writeImageDisplaySize(action.payload);\r\n    },\r\n    setVideoDisplaySize: (state, action: PayloadAction<VideoDisplaySize>) => {\r\n      state.video_display_size = action.payload;\r\n      writeVideoDisplaySize(action.payload);\r\n    },\r\n    setVideoDisplayType: (state, action: PayloadAction<VideoDisplayType>) => {\r\n      state.video_display_type = action.payload;\r\n      writeVideoDisplayType(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { clear, setLogin, setImageDisplaySize, setVideoDisplaySize, setVideoDisplayType } = settingsSlice.actions;\r\n\r\nexport const selectUsername = (state: RootState) => state.settings.username;\r\nexport const selectAPIKey = (state: RootState) => state.settings.api_key;\r\nexport const selectImageDisplaySize = (state: RootState) => state.settings.image_display_size;\r\nexport const selectVideoDisplaySize = (state: RootState) => state.settings.video_display_size;\r\nexport const selectVideoDisplayType = (state: RootState) => state.settings.video_display_type;\r\n\r\nexport default settingsSlice.reducer;\r\n","import axios from \"axios\";\r\nimport rateLimit from \"axios-rate-limit\";\r\nimport { readAPIKey, readUsername } from \"../../slices/settingsSlice\";\r\n\r\nconst USER_AGENT = \"SanguineDerg's Slideshow/1.0 (by SanguineDerg on e621)\";\r\n\r\nconst _axios = axios.create({\r\n  baseURL: \"https://e621.net/\",\r\n});\r\n\r\n_axios.interceptors.request.use(config => {\r\n  // Add user agent through URL params\r\n  config.params = {\r\n    ...config.params,\r\n    _client: USER_AGENT,\r\n  };\r\n\r\n  // Add HTTP Basic Auth\r\n  const username = readUsername();\r\n  const apiKey = readAPIKey();\r\n  if (username !== '' && apiKey !== '') {\r\n    config.auth = {\r\n      username: username,\r\n      password: apiKey,\r\n    };\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport const e621 = rateLimit(_axios, {maxRPS: 1});\r\n","import { readImageDisplaySize } from '../../slices/settingsSlice';\r\nimport { e621 } from './config';\r\nimport { Post } from './interfaces/posts';\r\n\r\nconst PostAPI = {\r\n  // Fetch list of posts\r\n  getPosts: (options: {\r\n    limit?: number;\r\n    tags?: string;\r\n    page?: number | string;\r\n  } = {}) => {\r\n    return e621.get<{posts: Post[]}>('posts.json', {params: options});\r\n  }\r\n}\r\n\r\nexport const getPostMediaType = (post: Post) => {\r\n  switch (post.file.ext) {\r\n    case 'jpg':\r\n    case 'png':\r\n    case 'gif':\r\n      return 'image';\r\n    case 'webm':\r\n      return 'video';\r\n    case 'swf':\r\n      return 'flash';\r\n  }\r\n}\r\n\r\nconst getPostImageURL = (post: Post) => {\r\n  if (post.file.url === null) return getPostImageBypassURL(post);\r\n  const imageDisplaySize = readImageDisplaySize();\r\n  switch (imageDisplaySize) {\r\n    case 'full':\r\n      return post.file.url;\r\n    case 'sample':\r\n      return post.sample.url;\r\n  }\r\n}\r\n\r\nconst getPostImageBypassURL = (post: Post) => {\r\n  const imageDisplaySize = readImageDisplaySize();\r\n  const md5 = post.file.md5;\r\n  switch (imageDisplaySize) {\r\n    case 'full':\r\n      return `https://static1.e621.net/data/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n    case 'sample':\r\n      if (!post.sample.has) return `https://static1.e621.net/data/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n      return `https://static1.e621.net/data/sample/${md5.substring(0, 2)}/${md5.substring(2, 4)}/${md5}.${post.file.ext}`;\r\n  }\r\n}\r\n\r\nexport const getPostMediaURL = (post: Post) => {\r\n  // TODO add URLs for videos and flash\r\n  switch (getPostMediaType(post)) {\r\n    case 'image':\r\n      return getPostImageURL(post);\r\n    case 'video':\r\n      return '';\r\n    case 'flash':\r\n      return '';\r\n  }\r\n}\r\n\r\nexport default PostAPI\r\n","import { createSlice, PayloadAction, createAsyncThunk, createSelector } from '@reduxjs/toolkit';\r\nimport { Post } from '../api/e621/interfaces/posts';\r\nimport PostAPI from '../api/e621/posts';\r\nimport { RootState, AppThunk } from '../app/store';\r\n\r\nexport interface PostsState {\r\n  posts: {[key: number]: Post};\r\n  fetch_order: number[];\r\n  fetch_tags: string;\r\n  fetch_page: number;\r\n  fetch_status: 'idle' | 'loading' | 'failed' | 'finished';\r\n  fetch_id: string;\r\n  slideshow_index: number;\r\n}\r\n\r\nconst initialState: PostsState = {\r\n  posts: {},\r\n  fetch_order: [],\r\n  fetch_tags: '',\r\n  fetch_page: 1,\r\n  fetch_status: 'idle',\r\n  fetch_id: '',\r\n  slideshow_index: 0,\r\n};\r\n\r\nconst fetchPosts = createAsyncThunk<\r\n  Post[],\r\n  void,\r\n  {state: RootState}\r\n>(\r\n  'posts/fetchPosts',\r\n  async (_, thunkAPI) => {\r\n    const response = await PostAPI.getPosts({\r\n      tags: selectTags(thunkAPI.getState()),\r\n      page: selectPage(thunkAPI.getState()),\r\n    });\r\n    return response.data.posts;\r\n  }\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state.fetch_order = [];\r\n      state.fetch_tags = '';\r\n      state.fetch_page = 1;\r\n      state.fetch_status = 'idle';\r\n      state.fetch_id = '';\r\n      state.slideshow_index = 0;\r\n    },\r\n    startSearch: (state, action: PayloadAction<string>) => {\r\n      state.fetch_order = [];\r\n      state.fetch_tags = action.payload;\r\n      state.fetch_page = 1;\r\n      state.fetch_status = 'idle';\r\n      state.fetch_id = '';\r\n      state.slideshow_index = 0;\r\n    },\r\n    previousSlide: (state) => {\r\n      if (state.slideshow_index !== 0) {\r\n        state.slideshow_index -= 1;\r\n      }\r\n    },\r\n    nextSlide: (state) => {\r\n      if (state.slideshow_index < state.fetch_order.length - 1) {\r\n        state.slideshow_index += 1;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.fetch_status = 'loading';\r\n        state.fetch_id = action.meta.requestId;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        // Check if the fetch was cancelled\r\n        if (action.meta.requestId !== state.fetch_id) return;\r\n        const posts = action.payload;\r\n        if (posts.length === 0) {\r\n          state.fetch_status = 'finished';\r\n          state.fetch_page = 0;\r\n          state.fetch_id = '';\r\n        } else {\r\n          state.fetch_status = 'idle';\r\n          state.fetch_page = state.fetch_page && state.fetch_page + 1;\r\n          state.fetch_id = '';\r\n          posts.forEach(post => {\r\n            state.posts[post.id] = post;\r\n            state.fetch_order.push(post.id);\r\n          });\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clear, startSearch, previousSlide, nextSlide } = postsSlice.actions;\r\n\r\nexport const selectTags = (state: RootState) => state.posts.fetch_tags;\r\nexport const selectPage = (state: RootState) => state.posts.fetch_page;\r\nexport const selectFetchStatus = (state: RootState) => state.posts.fetch_status;\r\nexport const selectFetchOrder = (state: RootState) => state.posts.fetch_order;\r\nexport const selectPosts = (state: RootState) => state.posts.posts;\r\n\r\nexport const selectSlideshowIndex = (state: RootState) => state.posts.slideshow_index;\r\n\r\nexport const selectCacheIndices = createSelector([selectSlideshowIndex, selectFetchOrder], (index, order) => {\r\n  // TODO add settings for cache size\r\n  const indices = Array.from({length: 6}, (_, i) => i + index - 2);\r\n  return indices.filter((i) => i >= 0 && i < order.length);\r\n});\r\n\r\nexport const selectCurrentSlideshowPost = createSelector([selectPosts, selectFetchOrder, selectSlideshowIndex], (posts, order, index) => {\r\n  if (order.length === 0) return null;\r\n  return posts[order[index]];\r\n});\r\n\r\nexport const selectCurrentSlideshowPostId = createSelector([selectCurrentSlideshowPost], (post) => {\r\n  return post !== null ? post.id : null;\r\n});\r\n\r\nexport const selectCachePosts = createSelector([selectPosts, selectFetchOrder, selectCacheIndices], (posts, order, indices) => {\r\n  if (order.length === 0) return [];\r\n  return indices.map(index => posts[order[index]]);\r\n});\r\n\r\nexport const tryFetchPosts = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const status = selectFetchStatus(getState());\r\n  if (status === 'idle') {\r\n    dispatch(fetchPosts());\r\n  }\r\n};\r\n\r\nexport const startSearchAndFetch = (tags: string): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(startSearch(tags));\r\n  dispatch(fetchPosts());\r\n};\r\n\r\nexport const nextSlideAndPrefetch = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(nextSlide());\r\n  const index = selectSlideshowIndex(getState());\r\n  const order = selectFetchOrder(getState());\r\n  if (index >= order.length - 5) {\r\n    dispatch(tryFetchPosts());\r\n  }\r\n};\r\n\r\nexport const previousSlideAndPrefetch = (): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch(previousSlide());\r\n  const index = selectSlideshowIndex(getState());\r\n  const order = selectFetchOrder(getState());\r\n  if (index >= order.length - 5) {\r\n    dispatch(tryFetchPosts());\r\n  }\r\n};\r\n\r\nexport default postsSlice.reducer;\r\n","import { getPostMediaType, getPostMediaURL } from '../../api/e621/posts';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { selectCachePosts } from '../../slices/postsSlice';\r\nimport styles from './Cache.module.css';\r\n\r\nexport default function Cache() {\r\n  const cachePosts = useAppSelector(selectCachePosts);\r\n\r\n  return (\r\n    <div className={styles.cache}>\r\n      {cachePosts.map(post => {\r\n        return (getPostMediaType(post) === 'image') && (<img key={post.id} src={getPostMediaURL(post)} alt=\"\" />);\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\n\r\ntype ViewScreen = 'search' | 'slideshow' | 'settings';\r\n\r\nexport interface ViewState {\r\n  screen: ViewScreen;\r\n}\r\n\r\nconst initialState: ViewState = {\r\n  screen: 'search',\r\n};\r\n\r\nexport const viewSlice = createSlice({\r\n  name: 'view',\r\n  initialState,\r\n  reducers: {\r\n    switchScreen: (state, action: PayloadAction<ViewScreen>) => {\r\n      state.screen = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { switchScreen } = viewSlice.actions;\r\n\r\nexport const selectScreen = (state: RootState) => state.view.screen;\r\n\r\nexport default viewSlice.reducer;\r\n","import { useState } from \"react\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport { startSearchAndFetch } from \"../../slices/postsSlice\";\r\nimport { switchScreen } from \"../../slices/viewSlice\";\r\n\r\nexport default function Search() {\r\n  const [tags, setTags] = useState('');\r\n  const dispatch = useAppDispatch();\r\n\r\n  const submit = () => {\r\n    dispatch(startSearchAndFetch(tags));\r\n    dispatch(switchScreen('slideshow'));\r\n  }\r\n\r\n  const openSettings = () => {\r\n    dispatch(switchScreen('settings'));\r\n  }\r\n\r\n  const close = () => {\r\n    dispatch(switchScreen('slideshow'));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input value={tags} onChange={e => setTags(e.target.value)} type=\"text\" /><br/>\r\n      <button onClick={submit}>Search</button><br/>\r\n      <button onClick={close}>Close</button><br/>\r\n      <button onClick={openSettings}>Settings</button>\r\n    </div>\r\n  );\r\n}","import { e621 } from './config';\r\nimport { ManagedSets, Set } from './interfaces/sets';\r\n\r\nconst SetsAPI = {\r\n  // Fetch sets owned or maintained by the current user\r\n  getManagedSets: () => {\r\n    return e621.get<ManagedSets>('post_sets/for_select.json');\r\n  },\r\n  addPostToSet: (postId: number, setId: number) => {\r\n    const formData = new FormData();\r\n    formData.append('post_ids[]', postId.toString());\r\n    return e621.post<Set>(`post_sets/${setId}/add_posts.json`, formData);\r\n  },\r\n}\r\n\r\nexport default SetsAPI\r\n","import { createSlice, PayloadAction, createAsyncThunk, createSelector } from '@reduxjs/toolkit';\r\nimport { ManagedSets, Set } from '../api/e621/interfaces/sets';\r\nimport SetsAPI from '../api/e621/sets';\r\nimport { RootState } from '../app/store';\r\nimport { selectCurrentSlideshowPostId } from './postsSlice';\r\n\r\nexport interface SetState {\r\n  managed_sets: ManagedSets | null;\r\n  working_set_id: number | null;\r\n  working_set: Set | null;\r\n  update_set_status: 'idle' | 'working' | 'added' | 'removed' | 'failed';\r\n}\r\n\r\nconst initialState: SetState = {\r\n  managed_sets: null,\r\n  working_set_id: null,\r\n  working_set: null,\r\n  update_set_status: 'idle',\r\n};\r\n\r\nexport const fetchManagedSets = createAsyncThunk(\r\n  'sets/fetchManagedSets',\r\n  async () => {\r\n    const response = await SetsAPI.getManagedSets();\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const addCurrentPostToSet = createAsyncThunk<\r\n  Set | null,\r\n  void,\r\n  {state: RootState}\r\n>(\r\n  'sets/addCurrentPostToSet',\r\n  async (_, thunkAPI) => {\r\n    const postId = selectCurrentSlideshowPostId(thunkAPI.getState());\r\n    const setId = selectWorkingSetId(thunkAPI.getState());\r\n    if (postId === null || setId === null) return null;\r\n    const response = await SetsAPI.addPostToSet(postId, setId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const setSlice = createSlice({\r\n  name: 'sets',\r\n  initialState,\r\n  reducers: {\r\n    setWorkingSetId: (state, action: PayloadAction<number | null>) => {\r\n      state.working_set_id = action.payload;\r\n      state.working_set = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchManagedSets.fulfilled, (state, action) => {\r\n        state.managed_sets = action.payload;\r\n      })\r\n      .addCase(fetchManagedSets.rejected, (state, action) => {\r\n        // Sets could not be fetched, probably not logged in\r\n        state.managed_sets = null;\r\n        state.working_set_id = null;\r\n        state.working_set = null;\r\n      })\r\n      .addCase(addCurrentPostToSet.pending, (state, action) => {\r\n        state.update_set_status = 'working';\r\n      })\r\n      .addCase(addCurrentPostToSet.fulfilled, (state, action) => {\r\n        state.working_set = action.payload;\r\n        if (action.payload === null) {\r\n          state.update_set_status = 'failed';\r\n        } else {\r\n          state.update_set_status = 'added';\r\n        }\r\n      })\r\n      .addCase(addCurrentPostToSet.rejected, (state, action) => {\r\n        state.update_set_status = 'failed';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setWorkingSetId } = setSlice.actions;\r\n\r\nexport const selectManagedSets = (state: RootState) => state.sets.managed_sets;\r\nexport const selectWorkingSetId = (state: RootState) => state.sets.working_set_id;\r\nexport const selectWorkingSet = (state: RootState) => state.sets.working_set;\r\nexport const selectUpdateSetStatus = (state: RootState) => state.sets.update_set_status;\r\n\r\nexport const selectIsCurrentPostInSet = createSelector([selectCurrentSlideshowPostId, selectWorkingSet], (postId, set) => {\r\n  return (postId !== null && set !== null) ? set.post_ids.includes(postId) : false;\r\n});\r\n\r\nexport default setSlice.reducer;\r\n","import { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { ImageDisplaySize, selectImageDisplaySize, selectUsername, setImageDisplaySize, setLogin } from \"../../slices/settingsSlice\";\r\nimport { fetchManagedSets, selectManagedSets, selectWorkingSetId, setWorkingSetId } from \"../../slices/setSlice\";\r\nimport { switchScreen } from \"../../slices/viewSlice\";\r\n\r\nexport default function Settings() {\r\n  const [username, setLocalUsername] = useState('');\r\n  const [apiKey, setLocalAPIKey] = useState('');\r\n\r\n  const currentUsername = useAppSelector(selectUsername);\r\n  const currentImageDisplaySize = useAppSelector(selectImageDisplaySize);\r\n  const managedSets = useAppSelector(selectManagedSets);\r\n  const workingSetId = useAppSelector(selectWorkingSetId);\r\n  \r\n  const dispatch = useAppDispatch();\r\n\r\n  const saveLogin = () => {\r\n    dispatch(setLogin({username: username, apiKey: apiKey}));\r\n  }\r\n\r\n  const close = () => {\r\n    dispatch(switchScreen('search'));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <span>{currentUsername !== '' ? `Logged in as ${currentUsername}` : 'Not logged in'}</span><br/>\r\n      <input value={username} onChange={e => setLocalUsername(e.target.value)} type=\"text\" /><br/>\r\n      <input value={apiKey} onChange={e => setLocalAPIKey(e.target.value)} type=\"password\" /><br/>\r\n      <button onClick={saveLogin}>Save Login</button><hr/>\r\n      <select value={currentImageDisplaySize} onChange={e => dispatch(setImageDisplaySize(e.target.value as ImageDisplaySize))}>\r\n        <option value=\"full\">Full Image</option>\r\n        <option value=\"sample\">Sample Image</option>\r\n      </select><hr/>\r\n      <button onClick={() => dispatch(fetchManagedSets())}>Get sets</button><br/>\r\n      {managedSets !== null && (\r\n        <>\r\n          <select value={workingSetId !== null ? workingSetId : undefined} onChange={e => dispatch(setWorkingSetId(e.target.value !== \"\" ? parseInt(e.target.value) : null))}>\r\n            <option>Select a set</option>\r\n            <optgroup label=\"Owned\">\r\n              {managedSets.Owned.map(([setName, setId], index) => (\r\n                <option value={setId} key={index}>{setName}</option>\r\n              ))}\r\n            </optgroup>\r\n            <optgroup label=\"Owned\">\r\n              {managedSets.Maintained.map(([setName, setId], index) => (\r\n                <option value={setId} key={index}>{setName}</option>\r\n              ))}\r\n            </optgroup>\r\n          </select><hr/>\r\n        </>\r\n      )}\r\n      <button onClick={close}>Close</button>\r\n    </div>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport { getPostMediaType, getPostMediaURL } from '../../api/e621/posts';\r\nimport { selectCurrentSlideshowPost } from '../../slices/postsSlice';\r\nimport styles from './Display.module.css'\r\n\r\nexport function Display() {\r\n  const currentPost = useSelector(selectCurrentSlideshowPost);\r\n\r\n  const currentFiletype = currentPost !== null ? getPostMediaType(currentPost) : null;\r\n\r\n  return (\r\n    <div className={styles.displayContainer}>\r\n      {currentFiletype === 'image' && (\r\n        <img className={styles.image} src={currentPost !== null ? (getPostMediaURL(currentPost)) : undefined} alt=\"\" />\r\n      )}\r\n      {currentFiletype === 'video' && (\r\n        <div className={styles.text}><span>Video</span></div>\r\n      )}\r\n      {currentFiletype === 'flash' && (\r\n        <div className={styles.text}><span>Flash</span></div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { addCurrentPostToSet, selectIsCurrentPostInSet } from \"../../slices/setSlice\";\r\nimport styles from './ManageSetButton.module.css';\r\n\r\nexport default function ManageSetButton() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const isPostInSet = useAppSelector(selectIsCurrentPostInSet);\r\n\r\n  return (\r\n    <button className={styles.manageSetButton} onClick={() => dispatch(addCurrentPostToSet())}>{isPostInSet ? '➖' : '➕'}</button>\r\n  );\r\n}","import { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { nextSlideAndPrefetch, previousSlideAndPrefetch, selectCurrentSlideshowPost } from '../../slices/postsSlice';\r\nimport { switchScreen } from '../../slices/viewSlice';\r\nimport styles from './Interface.module.css';\r\nimport ManageSetButton from './ManageSetButton';\r\n\r\nexport function Interface() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentPost = useAppSelector(selectCurrentSlideshowPost);\r\n\r\n  return (\r\n    <div className={styles.interfaceContainer}>\r\n      <div className={styles.mainControls}>\r\n        <div className={styles.nextSlide} onClick={() => dispatch(nextSlideAndPrefetch())}>Next</div>\r\n        <div className={styles.previousSlide} onClick={() => dispatch(previousSlideAndPrefetch())}>Previous</div>\r\n        <div className={styles.exitSlideshow} onClick={() => dispatch(switchScreen('search'))}>Close</div>\r\n        <a className={styles.viewSource} target=\"_blank\" rel=\"noopener noreferrer\" {...(currentPost === null ? {onClick: () => {}} : {href: `https://e621.net/posts/${currentPost.id}`})}>Link</a>\r\n      </div>\r\n      <div className={styles.extraControls}>\r\n        <ManageSetButton />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { Display } from '../display/Display';\r\nimport { Interface } from '../interface/Interface';\r\nimport styles from './Slideshow.module.css';\r\n\r\nexport function Slideshow() {\r\n  return (\r\n    <div className={styles.slideshowContainer}>\r\n      <Display />\r\n      <Interface />\r\n    </div>\r\n  );\r\n}","import { PropsWithChildren } from 'react';\r\nimport styles from './View.module.css';\r\n\r\ninterface ViewProps {\r\n  visible: boolean;\r\n}\r\n\r\nexport default function View(props: PropsWithChildren<ViewProps>) {\r\n  return (\r\n    <div className={styles.view + ' ' + (props.visible ? styles.visible : styles.hidden)}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { useAppSelector } from './app/hooks';\r\nimport Cache from './components/cache/Cache';\r\nimport Search from './components/search/Search';\r\nimport Settings from './components/settings/Settings';\r\nimport { Slideshow } from './components/slideshow/Slideshow';\r\nimport View from './components/view/View';\r\nimport { selectScreen } from './slices/viewSlice';\r\n\r\nfunction App() {\r\n  const screen = useAppSelector(selectScreen);\r\n  return (\r\n    <div className=\"App\">\r\n      <Cache />\r\n      <View visible={screen === 'slideshow'} ><Slideshow /></View>\r\n      <View visible={screen === 'search'} ><Search /></View>\r\n      <View visible={screen === 'settings'} ><Settings /></View>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport postsReducer from '../slices/postsSlice';\nimport settingsSlice, { getLocalStorageSettings } from '../slices/settingsSlice';\nimport setSlice from '../slices/setSlice';\nimport viewReducer from '../slices/viewSlice';\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    view: viewReducer,\n    settings: settingsSlice,\n    sets: setSlice,\n  },\n  preloadedState: {settings: getLocalStorageSettings()},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { fetchManagedSets } from './slices/setSlice';\n\nstore.dispatch(fetchManagedSets());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}